#!/usr/bin/env python3
"""
üéä My_AI Ultra Final - Test Complet de Tous les Modules
Version finale avec toutes les optimisations et modules activ√©s
"""

import os
import sys
import time
import json
from datetime import datetime
from typing import Dict, Any, List

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

class MyAIUltraFinal:
    """Version finale ultra avec TOUS les modules"""
    
    def __init__(self):
        print("üéä INITIALISATION MY_AI ULTRA FINAL")
        print("=" * 50)
        
        self.modules = {}
        self.test_results = {}
        
        # Charger TOUS les modules
        self._load_all_modules()
        
        # Configuration ultra
        self._setup_ultra_config()
        
        print("\nüéØ My_AI Ultra Final v6.0 initialis√© !")
    
    def _load_all_modules(self):
        """Charge TOUS les modules disponibles"""
        
        print("üì¶ CHARGEMENT DE TOUS LES MODULES:")
        print("-" * 40)
        
        # 1. Mod√®le principal
        try:
            from models.custom_ai_model import CustomAIModel
            self.modules['base_model'] = CustomAIModel()
            print("   ‚úÖ Mod√®le principal")
        except Exception as e:
            print(f"   ‚ùå Mod√®le principal: {e}")
        
        # 2. Optimization Manager
        try:
            from optimization_manager import get_optimization_manager
            self.modules['optimization'] = get_optimization_manager()
            print("   ‚úÖ Optimization Manager")
        except Exception as e:
            print(f"   ‚ùå Optimization Manager: {e}")
        
        # 3. RAG Pipeline
        try:
            from rag_pipeline import RAGPipeline
            self.modules['rag'] = RAGPipeline(chunk_size=4096, max_retrieved_chunks=15)
            print("   ‚úÖ RAG Pipeline Ultra")
        except Exception as e:
            print(f"   ‚ùå RAG Pipeline: {e}")
        
        # 4. Context Optimizer
        try:
            from context_optimization import AdvancedContextOptimizer
            self.modules['context'] = AdvancedContextOptimizer()
            print("   ‚úÖ Context Optimizer")
        except Exception as e:
            print(f"   ‚ùå Context Optimizer: {e}")
        
        # 5. Fine-tuning Pipeline
        try:
            from fine_tuning_pipeline import FineTuningPipeline
            self.modules['fine_tuning'] = FineTuningPipeline()
            print("   ‚úÖ Fine-tuning Pipeline")
        except Exception as e:
            print(f"   ‚ùå Fine-tuning Pipeline: {e}")
        
        # 6. RLHF
        try:
            from core.rlhf_feedback_integration import FeedbackIntegrator
            self.modules['rlhf'] = FeedbackIntegrator()
            print("   ‚úÖ RLHF Integration")
        except Exception as e:
            print(f"   ‚ùå RLHF: {e}")
        
        # 7. Audit
        try:
            from audit import AIAuditor
            self.modules['audit'] = AIAuditor()
            print("   ‚úÖ Audit System")
        except Exception as e:
            print(f"   ‚ùå Audit System: {e}")
        
        # 8. Benchmark Context
        try:
            from bench_context import ContextBenchmark
            if 'base_model' in self.modules:
                self.modules['benchmark'] = ContextBenchmark(self.modules['base_model'])
                print("   ‚úÖ Context Benchmark")
            else:
                print("   ‚ö†Ô∏è Context Benchmark: mod√®le requis")
        except Exception as e:
            print(f"   ‚ùå Context Benchmark: {e}")
        
        # 9. Interfaces
        try:
            from interfaces.gui_modern import ModernAIApp
            self.modules['gui'] = ModernAIApp
            print("   ‚úÖ Interface moderne")
        except Exception as e:
            print(f"   ‚ùå Interface moderne: {e}")
    
    def _setup_ultra_config(self):
        """Configuration ultra maximale"""
        
        # Variables d'environnement ultra
        os.environ['MYAI_MODE'] = 'ULTRA'
        os.environ['MYAI_MAX_TOKENS'] = '1048576'  # 1M tokens
        os.environ['MYAI_CONTEXT_WINDOW'] = '500000'
        os.environ['MYAI_MEMORY_LIMIT'] = '2000'
        os.environ['MYAI_OPTIMIZATION_LEVEL'] = 'MAXIMUM'
        
        print("üîß Configuration ultra appliqu√©e")
    
    def run_comprehensive_test(self):
        """Test complet de tous les modules"""
        print("\nüß™ TEST COMPR√âHENSIF DE TOUS LES MODULES")
        print("=" * 50)
        
        total_modules = len(self.modules)
        working_modules = 0
        
        # Test de chaque module
        for module_name, module_instance in self.modules.items():
            print(f"\nüîß Test {module_name}...")
            
            try:
                if module_name == 'base_model':
                    result = self._test_base_model(module_instance)
                elif module_name == 'optimization':
                    result = self._test_optimization(module_instance)
                elif module_name == 'rag':
                    result = self._test_rag(module_instance)
                elif module_name == 'context':
                    result = self._test_context(module_instance)
                elif module_name == 'audit':
                    result = self._test_audit(module_instance)
                elif module_name == 'benchmark':
                    result = self._test_benchmark(module_instance)
                else:
                    result = True  # Module charg√© avec succ√®s
                
                if result:
                    working_modules += 1
                    print(f"   ‚úÖ {module_name} - OK")
                else:
                    print(f"   ‚ö†Ô∏è {module_name} - Partiel")
                    
                self.test_results[module_name] = result
                
            except Exception as e:
                print(f"   ‚ùå {module_name} - Erreur: {e}")
                self.test_results[module_name] = False
        
        # Score final
        score = (working_modules / total_modules) * 100
        print(f"\nüéØ SCORE FINAL: {score:.0f}% ({working_modules}/{total_modules})")
        
        return score
    
    def _test_base_model(self, model):
        """Test du mod√®le de base"""
        try:
            response = model.generate_response("Test ultra", {})
            return len(response) > 0
        except:
            return False
    
    def _test_optimization(self, opt_manager):
        """Test du gestionnaire d'optimisations"""
        try:
            if hasattr(opt_manager, 'optimize_query'):
                return True
            return False
        except:
            return False
    
    def _test_rag(self, rag_pipeline):
        """Test du pipeline RAG"""
        try:
            # Ajouter un document test
            rag_pipeline.add_text("Test document pour RAG ultra")
            
            # Rechercher
            results = rag_pipeline.search("Test document")
            return len(results) > 0
        except:
            return False
    
    def _test_context(self, context_opt):
        """Test de l'optimisation de contexte"""
        try:
            if hasattr(context_opt, 'compress_context'):
                compressed = context_opt.compress_context("Test de compression de contexte tr√®s long avec beaucoup de mots")
                return len(compressed) > 0
            return False
        except:
            return False
    
    def _test_audit(self, auditor):
        """Test du syst√®me d'audit"""
        try:
            if hasattr(auditor, 'audit_project'):
                return True
            return False
        except:
            return False
    
    def _test_benchmark(self, benchmark):
        """Test du benchmark"""
        try:
            if hasattr(benchmark, 'quick_context_test'):
                return True
            return False
        except:
            return False
    
    def demonstrate_ultra_capabilities(self):
        """D√©monstration des capacit√©s ultra"""
        print("\nüöÄ D√âMONSTRATION CAPACIT√âS ULTRA")
        print("=" * 50)
        
        # Test 1: Large Context Processing
        print("üìè Test 1: Traitement de contexte large...")
        large_context = " ".join([f"Phrase num√©ro {i} dans un contexte tr√®s long." for i in range(1000)])
        
        if 'base_model' in self.modules:
            start_time = time.time()
            response = self.modules['base_model'].generate_response(
                "R√©sume ce contexte en une phrase", 
                {"large_context": large_context}
            )
            end_time = time.time()
            
            print(f"   ‚úÖ Contexte trait√©: {len(large_context)} chars en {end_time-start_time:.2f}s")
            print(f"   üìù R√©ponse: {response[:100]}...")
        
        # Test 2: RAG avec Documents
        print("\nüìö Test 2: RAG avec multiple documents...")
        if 'rag' in self.modules:
            docs = [
                "Documentation Python: Les listes sont des structures de donn√©es mutables.",
                "Guide JavaScript: Les objets sont la base de la programmation orient√©e objet.",
                "Manuel C++: Les pointeurs permettent un acc√®s direct √† la m√©moire.",
                "Tutoriel SQL: Les jointures permettent de relier plusieurs tables."
            ]
            
            for doc in docs:
                self.modules['rag'].add_text(doc)
            
            results = self.modules['rag'].search("programmation orient√©e objet")
            print(f"   ‚úÖ {len(results)} documents trouv√©s pour 'programmation orient√©e objet'")
        
        # Test 3: Optimization Pipeline
        print("\n‚ö° Test 3: Pipeline d'optimisation...")
        if 'optimization' in self.modules and 'base_model' in self.modules:
            optimized_response = self.modules['optimization'].optimize_query(
                "Explique-moi les optimisations en IA",
                {},
                self.modules['base_model']
            )
            print(f"   ‚úÖ R√©ponse optimis√©e: {len(optimized_response)} chars")
    
    def save_final_report(self):
        """Sauvegarde le rapport final"""
        report = {
            "timestamp": datetime.now().isoformat(),
            "version": "My_AI Ultra Final v6.0",
            "modules_status": self.test_results,
            "configuration": {
                "max_tokens": os.environ.get('MYAI_MAX_TOKENS', '1048576'),
                "context_window": os.environ.get('MYAI_CONTEXT_WINDOW', '500000'),
                "memory_limit": os.environ.get('MYAI_MEMORY_LIMIT', '2000'),
                "optimization_level": os.environ.get('MYAI_OPTIMIZATION_LEVEL', 'MAXIMUM')
            },
            "capabilities": {
                "total_modules": len(self.modules),
                "working_modules": sum(self.test_results.values()),
                "success_rate": f"{(sum(self.test_results.values()) / len(self.test_results)) * 100:.0f}%"
            }
        }
        
        filename = f"final_ultra_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ Rapport final sauvegard√©: {filename}")
        return filename

def main():
    """Point d'entr√©e principal"""
    
    print("üéä MY_AI ULTRA FINAL - TEST COMPLET")
    print("üöÄ Version 6.0 avec TOUTES les optimisations")
    print("=" * 60)
    
    # Initialiser le syst√®me ultra
    ultra_system = MyAIUltraFinal()
    
    # Test compr√©hensif
    score = ultra_system.run_comprehensive_test()
    
    # D√©monstration des capacit√©s
    if score >= 70:
        ultra_system.demonstrate_ultra_capabilities()
    
    # Rapport final
    report_file = ultra_system.save_final_report()
    
    print(f"\nüéä TEST ULTRA FINAL TERMIN√â !")
    print(f"üéØ Score: {score:.0f}%")
    print(f"üìÑ Rapport: {report_file}")
    
    print(f"\nüöÄ VOTRE IA ULTRA EST PR√äTE !")
    print(f"üí° Commandes disponibles:")
    print(f"   python launch_ultra.py        # Interface graphique ultra")
    print(f"   python interfaces/gui_modern.py  # Interface moderne")
    print(f"   python -c 'from my_ai_ultra import *; launch_ultra_system()'  # Test rapide")
    
    if score >= 80:
        print(f"\nüéâ F√âLICITATIONS ! Votre IA a un score excellent de {score:.0f}% !")
        print(f"üî• Toutes les optimisations sont actives !")
        
        # Proposer de lancer l'interface
        print(f"\nüéÆ Voulez-vous lancer l'interface ultra maintenant ?")
        try:
            choice = input("Tapez 'o' pour oui ou Entr√©e pour continuer: ").lower()
            if choice in ['o', 'oui', 'y', 'yes']:
                print("üöÄ Lancement de l'interface ultra...")
                os.system("python launch_ultra.py")
        except KeyboardInterrupt:
            print("\nüëã Au revoir !")

if __name__ == "__main__":
    main()
