{"input": "Quelle est la capitale de la France ?", "target": "**Paris**."}
{"input": "Explique le code suivant : for i in range(3): print(i)", "target": "Ce code affiche les nombres de **0 à 2**."}
{"input": "Donne-moi la météo à Toulouse.", "target": "Je ne peux pas accéder à Internet, mais tu peux consulter un site météo local."}
{"input": "Traduis en anglais : 'Bonjour tout le monde'", "target": "**Hello everyone**"}
{"input": "Résume ce texte : L'IA est un domaine en plein essor.", "target": "L'intelligence artificielle se développe **rapidement**."}
{"input": "Génère un email professionnel pour demander un rendez-vous.", "target": "Bonjour,\nJe souhaite convenir d'un **rendez-vous** à votre convenance. Cordialement."}
{"input": "Complète la phrase : L'eau bout à ...", "target": "**100°C**"}
{"input": "Code Python pour inverser une liste.", "target": "**ma_liste[::-1]**"}
{"input": "Donne-moi un synonyme de 'rapide'", "target": "**Vif**, **prompt**, **agile**, **expéditif**."}
{"input": "Explique le concept de machine learning.", "target": "Le **machine learning** consiste à entraîner un **modèle** à partir de **données** pour qu'il réalise des\n**prédictions** ou des **classifications**."}
{"input": "Traduis en espagnol : 'Merci beaucoup'", "target": "**Muchas gracias**"}
{"input": "Quelle est la date d'aujourd'hui ?", "target": "Je ne peux pas accéder à la date actuelle, mais tu peux la consulter sur ton appareil."}
{"input": "Complète : Python est un langage ...", "target": "de **programmation**."}
{"input": "Donne-moi la formule chimique de l'eau.", "target": "**H2O**"}
{"input": "Donne-moi un antonyme de 'facile'", "target": "**Difficile**, **compliqué**, **ardu**."}
{"input": "Traduis en allemand : 'Bonne nuit'", "target": "**Gute Nacht**"}
{"input": "Quelle est la couleur du ciel par temps clair ?", "target": "**Bleu**."}
{"input": "Code Python pour additionner deux nombres a et b.", "target": "**a + b**"}
{"input": "Donne-moi la capitale de l'Italie.", "target": "**Rome**."}
{"input": "Explique le terme 'biodiversité'.", "target": "La **biodiversité** désigne la variété des **espèces vivantes** sur Terre."}
{"input": "Quel est le symbole chimique du fer ?", "target": "**Fe**"}
{"input": "Complète : Le soleil se lève à l'...", "target": "**est**."}
{"input": "Quel est l'animal le plus rapide du monde ?", "target": "Le **faucon pèlerin** est l'animal le plus rapide."}
{"input": "Donne-moi la formule de l'aire d'un cercle.", "target": "**π × rayon²**"}
{"input": "Traduis en italien : 'Bonne journée'", "target": "**Buona giornata**"}
{"input": "Code Python pour afficher 'Bonjour'", "target": "**print('Bonjour')**"}
{"input": "Comment créer une fonction Python qui calcule le carré d'un nombre ?", "target": "```python\ndef carre(x):\n    return x ** 2\n\nresultat = carre(5)  # Résultat: 25\n```"}
{"input": "Explique le concept de variable en programmation avec un exemple.", "target": "Une **variable** est un conteneur qui stocke une valeur. Exemple : `nom = 'Alice'` stocke le texte 'Alice'\ndans la variable `nom`."}
{"input": "Comment faire une boucle qui compte de 1 à 10 en Python ?", "target": "```python\nfor i in range(1, 11):\n    print(i)\n```\nCela affiche les nombres de **1 à 10**."}
{"input": "Donne un exemple d'utilisation des listes en Python.", "target": "```python\nfruits = ['pomme', 'banane', 'orange']\nprint(fruits[0])  # Affiche: pomme\nfruits.append('kiwi')  # Ajoute 'kiwi' à la liste\n```"}
{"input": "Comment écrire une condition if-else en JavaScript ?", "target": "```javascript\nlet age = 18;\nif (age >= 18) {\n    console.log('Majeur');\n} else {\n    console.log('Mineur');\n}\n```"}
{"input": "Explique ce que fait cette requête SQL : SELECT * FROM users WHERE age > 25", "target": "Cette requête **sélectionne tous les champs** (*) de la table **users** pour les utilisateurs dont l'**âge est\nsupérieur à 25**."}
{"input": "Comment créer un dictionnaire en Python avec des informations personnelles ?", "target": "```python\npersonne = {\n    'nom': 'Dupont',\n    'age': 30,\n    'ville': 'Paris',\n    'profession': 'Ingénieur'\n}\nprint(personne['nom'])  # Affiche: Dupont\n```"}
{"input": "Donne un exemple de classe en programmation orientée objet.", "target": "```python\nclass Voiture:\n    def __init__(self, marque, couleur):\n        self.marque = marque\n        self.couleur = couleur\n    \n    def klaxonner(self):\n        return 'Beep beep!'\n\nma_voiture = Voiture('Renault', 'rouge')\n```"}
{"input": "Comment gérer les erreurs en Python avec try-except ?", "target": "```python\ntry:\n    resultat = 10 / 0\nexcept ZeroDivisionError:\n    print('Erreur: division par zéro!')\nexcept Exception as e:\n    print(f'Erreur inattendue: {e}')\n```"}
{"input": "Explique la différence entre une liste et un tuple en Python.", "target": "**Liste** : `[1, 2, 3]` - modifiable (mutable)\n**Tuple** : `(1, 2, 3)` - non modifiable (immutable)\nLes listes peuvent être changées après création, pas les tuples."}
{"input": "Comment créer une page web HTML basique ?", "target": "```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Ma Page</title>\n</head>\n<body>\n    <h1>Bienvenue</h1>\n    <p>Ceci est ma première page web!</p>\n</body>\n</html>\n```"}
{"input": "Donne un exemple d'utilisation des modules en Python.", "target": "```python\nimport random\nimport datetime\n\n# Génère un nombre aléatoire\nnombre = random.randint(1, 100)\n\n# Obtient la date actuelle\naujourdhui = datetime.date.today()\nprint(f'Nombre: {nombre}, Date: {aujourdhui}')\n```"}
{"input": "Comment créer un formulaire HTML avec validation ?", "target": "```html\n<form>\n    <label for='email'>Email:</label>\n    <input type='email' id='email' required>\n    \n    <label for='password'>Mot de passe:</label>\n    <input type='password' id='password' minlength='8' required>\n    \n    <button type='submit'>Envoyer</button>\n</form>\n```"}
{"input": "Explique le concept de récursion avec un exemple simple.", "target": "La **récursion** est quand une fonction s'appelle elle-même :\n```python\ndef factorielle(n):\n    if n <= 1:\n        return 1\n    return n * factorielle(n-1)\n\nprint(factorielle(5))  # Résultat: 120\n```"}
{"input": "Comment utiliser les compréhensions de listes en Python ?", "target": "```python\n# Liste des carrés de 1 à 10\ncarres = [x**2 for x in range(1, 11)]\n\n# Filtrer les nombres pairs\npairs = [x for x in range(20) if x % 2 == 0]\n```\nSyntaxe concise pour créer des listes."}
{"input": "Donne un exemple d'API REST avec les méthodes HTTP.", "target": "**GET** `/api/users` - Récupère la liste des utilisateurs\n**POST** `/api/users` - Crée un nouvel utilisateur\n**PUT** `/api/users/123` - Met à jour l'utilisateur 123\n**DELETE** `/api/users/123` - Supprime l'utilisateur 123"}
{"input": "Comment connecter Python à une base de données SQLite ?", "target": "```python\nimport sqlite3\n\n# Connexion à la base\nconn = sqlite3.connect('exemple.db')\ncursor = conn.cursor()\n\n# Exécuter une requête\ncursor.execute('SELECT * FROM users')\nresultats = cursor.fetchall()\n\nconn.close()\n```"}
{"input": "Explique le concept MVC avec un exemple web.", "target": "**MVC** (Modèle-Vue-Contrôleur) :\n- **Modèle** : Gestion des données (base de données)\n- **Vue** : Interface utilisateur (HTML/CSS)\n- **Contrôleur** : Logique métier (traitement des requêtes)\nSépare la logique pour faciliter la maintenance."}
{"input": "Comment créer un graphique avec matplotlib en Python ?", "target": "```python\nimport matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n\nplt.plot(x, y, 'bo-')\nplt.title('Mon Graphique')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.show()\n```"}
{"input": "Donne un exemple d'utilisation de pandas pour analyser des données.", "target": "```python\nimport pandas as pd\n\n# Lire un fichier CSV\ndf = pd.read_csv('donnees.csv')\n\n# Statistiques descriptives\nprint(df.describe())\n\n# Filtrer les données\nfiltre = df[df['age'] > 25]\n```"}
{"input": "Comment implémenter un algorithme de tri en Python ?", "target": "```python\n# Tri à bulles\ndef tri_bulles(liste):\n    n = len(liste)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if liste[j] > liste[j+1]:\n                liste[j], liste[j+1] = liste[j+1], liste[j]\n    return liste\n```"}
{"input": "Explique comment fonctionne Git avec un exemple pratique.", "target": "```bash git init  # Initialise un dépôt\ngit add .  # Ajoute tous les fichiers\ngit commit -m 'Premier commit'  # Sauvegarde\ngit push origin main  # Envoie vers le serveur\n```"}
{"input": "Comment créer une interface graphique simple avec tkinter ?", "target": "```python\nimport tkinter as tk\n\ndef dire_bonjour():\n    label.config(text='Bonjour!')\n\nwindow = tk.Tk()\nwindow.title('Mon App')\n\nbutton = tk.Button(window, text='Cliquez', command=dire_bonjour)\nlabel = tk.Label(window, text='Bienvenue')\n\nbutton.pack()\nlabel.pack()\nwindow.mainloop()\n```"}
{"input": "Donne un exemple d'expression régulière pour valider un email.", "target": "```python\nimport re\n\npattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\nemail = 'test@example.com'\n\nif re.match(pattern, email):\n    print('Email valide')\nelse:\n    print('Email invalide')\n```"}
{"input": "Comment utiliser les décorateurs en Python ?", "target": "```python\ndef mon_decorateur(func):\n    def wrapper(*args, **kwargs):\n        print('Avant la fonction')\n        resultat = func(*args, **kwargs)\n        print('Après la fonction')\n        return resultat\n    return wrapper\n\n@mon_decorateur\ndef dire_hello():\n    print('Hello!')\n```"}
{"input": "Explique le concept de closure en JavaScript.", "target": "Une **closure** permet à une fonction d'accéder aux variables de son scope parent :\n```javascript\nfunction creerCompteur() {\n    let count = 0;\n    return function() {\n        count++;\n        return count;\n    };\n}\n\nconst compteur = creerCompteur();\nconsole.log(compteur()); // 1\n```"}
{"input": "Comment créer un serveur web simple avec Flask ?", "target": "```python\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef accueil():\n    return '<h1>Bienvenue sur mon site!</h1>'\n\n@app.route('/contact')\ndef contact():\n    return 'Page de contact'\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```"}
{"input": "Donne un exemple d'utilisation de NumPy pour les calculs scientifiques.", "target": "```python\nimport numpy as np\n\n# Créer des tableaux\na = np.array([1, 2, 3, 4])\nb = np.array([5, 6, 7, 8])\n\n# Opérations vectorielles\nsomme = a + b  # [6, 8, 10, 12]\nproduit = a * b  # [5, 12, 21, 32]\nmoyenne = np.mean(a)  # 2.5\n```"}
{"input": "Comment implémenter un système de login sécurisé ?", "target": "**Bonnes pratiques** :\n1. **Hasher** les mots de passe (bcrypt)\n2. Utiliser **HTTPS**\n3. Implémenter la **limitation de tentatives**\n4. Utiliser des **tokens JWT** ou **sessions**\n5. **Validation** côté client et serveur"}
{"input": "Explique le concept de programmation asynchrone avec async/await.", "target": "```python\nimport asyncio\n\nasync def tache_longue():\n    print('Début de la tâche')\n    await asyncio.sleep(2)  # Simule une attente\n    print('Fin de la tâche')\n    return 'Résultat'\n\nasync def main():\n    resultat = await tache_longue()\n    print(resultat)\n\nasyncio.run(main())\n```"}
{"input": "Comment optimiser les performances d'une application web ?", "target": "**Techniques d'optimisation** :\n1. **Mise en cache** (Redis, Memcached)\n2. **Compression** des ressources (Gzip)\n3. **CDN** pour les assets statiques\n4. **Optimisation SQL** et indexation\n5. **Lazy loading** des images\n6. **Minification** CSS/JS"}
{"input": "Donne un exemple de test unitaire en Python avec pytest.", "target": "```python\n# test_calculatrice.py\ndef additionner(a, b):\n    return a + b\n\ndef test_addition_positive():\n    assert additionner(2, 3) == 5\n\ndef test_addition_negative():\n    assert additionner(-1, 1) == 0\n\n# Exécuter : pytest test_calculatrice.py\n```"}
{"input": "Comment utiliser Docker pour conteneuriser une application ?", "target": "```dockerfile\n# Dockerfile\nFROM python:3.9\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nCOPY . .\nEXPOSE 8000\nCMD ['python', 'app.py']\n```\n```bash\ndocker build -t mon-app .\ndocker run -p 8000:8000 mon-app\n```"}
{"input": "Explique le concept de machine learning avec un exemple pratique.", "target": "**Machine Learning** : faire apprendre un modèle à partir de données.\n```python\nfrom sklearn.linear_model import LinearRegression\n\n# Données d'entraînement\nX = [[1], [2], [3], [4]]  # Taille maison\ny = [100, 200, 300, 400]  # Prix\n\n# Entraînement\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Prédiction\nprix_predit = model.predict([[5]])  # Prédit le prix pour une maison de taille 5\n```"}
{"input": "Comment créer une animation CSS pour améliorer l'UX ?", "target": "```css\n.bouton {\n    background-color: #3498db;\n    transition: all 0.3s ease;\n}\n\n.bouton:hover {\n    background-color: #2980b9;\n    transform: translateY(-2px);\n    box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n}\n\n@keyframes pulse {\n    0% { transform: scale(1); }\n    50% { transform: scale(1.05); }\n    100% { transform: scale(1); }\n}\n\n.animation-pulse {\n    animation: pulse 2s infinite;\n}\n```"}
{"input": "Donne un exemple d'architecture microservices.", "target": "**Architecture Microservices** :\n- **Service Users** : Gestion des utilisateurs\n- **Service Products** : Catalogue produits\n- **Service Orders** : Commandes\n- **Service Payments** : Paiements\n- **API Gateway** : Point d'entrée unique\n- **Service Discovery** : Localisation des services\nChaque service est **indépendant** et **déployable** séparément."}
{"input": "Comment implémenter la sécurité CORS dans une API ?", "target": "```python\n# Flask-CORS\nfrom flask import Flask\nfrom flask_cors import CORS\n\napp = Flask(__name__)\nCORS(app, origins=['http://localhost:3000'])\n\n# Ou configuration manuelle\n@app.after_request\ndef after_request(response):\n    response.headers.add('Access-Control-Allow-Origin', '*')\n    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')\n    return response\n```"}
{"input": "Explique le concept de blockchain avec un exemple simple.", "target": "**Blockchain** = chaîne de blocs liés cryptographiquement :\n```\nBloc 1: [Données] + [Hash précédent: 0] = Hash: ABC123\nBloc 2: [Données] + [Hash précédent: ABC123] = Hash: DEF456\nBloc 3: [Données] + [Hash précédent: DEF456] = Hash: GHI789\n```\n**Immutable** : modifier un bloc change son hash et brise la chaîne."}
{"input": "Comment créer un chatbot simple avec Python ?", "target": "```python\nimport random\n\nreponses = {\n    'bonjour': ['Salut!', 'Hello!', 'Bonjour à toi!'],\n    'comment': ['Ça va bien!', 'Très bien merci!'],\n    'au revoir': ['À bientôt!', 'Bye!', 'Au revoir!']\n}\n\ndef chatbot(message):\n    message = message.lower()\n    for mot_cle, responses in reponses.items():\n        if mot_cle in message:\n            return random.choice(responses)\n    return 'Je ne comprends pas.'\n\n# Utilisation\nprint(chatbot('Bonjour!'))\n```"}
{"input": "Donne un exemple d'utilisation de l'intelligence artificielle en entreprise.", "target": "**Exemples d'IA en entreprise** :\n1. **Service client** : Chatbots intelligents\n2. **E-commerce** : Recommandations personnalisées\n3. **Finance** : Détection de fraudes\n4. **RH** : Tri automatique de CV\n5. **Marketing** : Analyse prédictive\n6. **Maintenance** : Maintenance prédictive IoT"}
{"input": "Comment créer une progressive web app (PWA) ?", "target": "**PWA = App web qui fonctionne comme une app native**\n```json\n// manifest.json\n{\n  'name': 'Mon App',\n  'short_name': 'App',\n  'start_url': '/',\n  'display': 'standalone',\n  'background_color': '#ffffff',\n  'theme_color': '#000000',\n  'icons': [{'src': '/icon.png', 'sizes': '192x192'}]\n}\n```\n+ **Service Worker** pour le cache offline"}
{"input": "Donne-moi un synonyme de 'heureux'", "target": "**Joyeux**, **content**, **satisfait**, **ravi**."}
{"input": "Complète : La Terre tourne autour du ...", "target": "**Soleil**."}
{"input": "Explique le terme 'photosynthèse'.", "target": "La **photosynthèse** est le processus par lequel les plantes transforment la lumière en énergie."}
{"input": "Traduis en anglais : 'Je t'aime'", "target": "**I love you**"}
{"input": "Donne-moi la capitale du Japon.", "target": "**Tokyo**."}
{"input": "Code Python pour calculer la longueur d'une liste nommée 'ma_liste'.", "target": "**len(ma_liste)**"}
{"input": "Complète : Le sang circule dans les ...", "target": "**veines** et **artères**."}
{"input": "Qui a inventé le téléphone ?", "target": "**Alexander Graham Bell**."}
{"input": "Explique le terme 'écosystème'.", "target": "Un **écosystème** est un ensemble d'êtres vivants et leur environnement."}
{"input": "Quel est le symbole chimique de l'or ?", "target": "**Au**"}
