{"input": "Quel est le code pour une condition en Python ?", "target": "if x > 0: print('Positif')"}
{"input": "Comment afficher un nombre aléatoire en Python ?", "target": "import random; print(random.randint(1, 10))"}
{"input": "Quel est le code pour une fonction lambda en Python ?", "target": "lambda x: x + 1"}
{"input": "Comment afficher tous les éléments d'une liste en Python ?", "target": "for x in ma_liste: print(x)"}
{"input": "Comment afficher le type d'une variable en Python ?", "target": "type(ma_var)"}
{"input": "Qu'est-ce qu'une adresse IP ?", "target": "Une **adresse IP (Internet Protocol)** est un identifiant unique attribué à chaque appareil connecté à un\nréseau informatique utilisant le protocole Internet. Elle permet d'acheminer les données entre les appareils\nsur un réseau local ou sur Internet. Il existe des adresses IPv4 (ex : 192.168.1.1) et IPv6 (ex :\n2001:0db8:85a3::8a2e:0370:7334)."}
{"input": "À quoi sert un pare-feu informatique ?", "target": "Un **pare-feu (firewall)** est un dispositif de sécurité qui contrôle le trafic réseau entrant et sortant d'un\nordinateur ou d'un réseau. Il permet de bloquer les connexions non autorisées et de protéger contre les\nattaques extérieures, tout en autorisant les communications légitimes."}
{"input": "Qu'est-ce qu'un système d'exploitation ?", "target": "Un **système d'exploitation (OS)** est un logiciel qui gère le matériel d'un ordinateur et fournit des\nservices aux programmes applicatifs. Exemples : Windows, macOS, Linux, Android. Il gère la mémoire, les\nfichiers, les périphériques et l'exécution des applications."}
{"input": "Comment fonctionne le cloud computing ?", "target": "Le **cloud computing** consiste à utiliser des ressources informatiques (serveurs, stockage, applications)\nhébergées à distance et accessibles via Internet. Cela permet d'accéder à des services à la demande, de\nstocker des données en ligne et de bénéficier d'une grande flexibilité sans gérer l'infrastructure physique."}
{"input": "Qu'est-ce qu'un algorithme ?", "target": "Un **algorithme** est une suite d'instructions ou d'étapes permettant de résoudre un problème ou d'accomplir\nune tâche. En informatique, il s'agit d'une méthode logique et structurée, souvent traduite en code, pour\ntraiter des données ou automatiser des processus."}
{"input": "À quoi sert la virtualisation ?", "target": "La **virtualisation** permet d'exécuter plusieurs systèmes d'exploitation ou applications sur une même machine\nphysique, en créant des environnements virtuels isolés. Cela optimise l'utilisation des ressources, facilite\nla gestion et améliore la sécurité et la flexibilité des infrastructures informatiques."}
{"input": "Qu'est-ce qu'un réseau local (LAN) ?", "target": "Un **réseau local (LAN, Local Area Network)** est un réseau informatique limité à une zone géographique\nrestreinte, comme un bureau ou une maison. Il permet de connecter plusieurs appareils (ordinateurs,\nimprimantes, etc.) pour partager des ressources et des informations rapidement et en toute sécurité."}
{"input": "Qu'est-ce que le Big Data ?", "target": "Le **Big Data** désigne l'ensemble des **données massives** générées à grande vitesse et en grande variété par\nles entreprises, les objets connectés, les réseaux sociaux, etc. Leur volume, leur vélocité et leur variété\nnécessitent des outils et des technologies spécifiques pour les stocker, les traiter et en extraire de la\n**valeur** (ex : Hadoop, Spark)."}
{"input": "Qu'est-ce qu'un data lake ?", "target": "Un **data lake** est un espace de stockage centralisé permettant de conserver de grandes quantités de\n**données brutes** (structurées ou non) à l'échelle. Il facilite l'analyse, la transformation et\nl'exploitation des données par les équipes de **data science** et d'**IA**."}
{"input": "Quelle est la différence entre machine learning et deep learning ?", "target": "Le **machine learning** (apprentissage automatique) regroupe les techniques permettant à un ordinateur\nd'apprendre à partir de **données** sans être explicitement programmé. Le **deep learning** (apprentissage\nprofond) est une sous-catégorie du machine learning qui utilise des **réseaux de neurones artificiels** à\nplusieurs couches pour traiter des données complexes (images, texte, etc.)."}
{"input": "Qu'est-ce qu'un modèle d'intelligence artificielle ?", "target": "Un **modèle d'IA** est un programme ou un algorithme capable d'effectuer des tâches habituellement réservées à\nl'humain, comme la reconnaissance d'images, la compréhension du langage ou la prise de décision. Il est\nentraîné à partir de **données** pour apprendre des **patterns** et faire des prédictions ou des\nclassifications."}
{"input": "À quoi sert un data scientist ?", "target": "Un **data scientist** est un expert qui collecte, analyse et interprète de grandes quantités de **données**\npour en extraire des **informations utiles**. Il utilise des techniques de **statistiques**, de **machine\nlearning** et de **visualisation** pour aider à la prise de décision et à l'innovation dans l'entreprise."}
{"input": "Qu'est-ce qu'un algorithme de classification ?", "target": "Un **algorithme de classification** est un type d'algorithme de **machine learning** qui permet d'attribuer\nune **étiquette** ou une **catégorie** à une donnée en fonction de ses caractéristiques. Exemples :\nclassification d'e-mails en spam/non-spam, reconnaissance d'images, etc."}
{"input": "Qu'est-ce qu'un jeu de données d'entraînement ?", "target": "Un **jeu de données d'entraînement** (training set) est un ensemble de **données** utilisé pour entraîner un\n**modèle d'IA** ou de **machine learning**. Il contient des exemples pour permettre au modèle d'apprendre à\nreconnaître des patterns et à faire des prédictions sur de nouvelles données."}
{"input": "Qu'est-ce que le traitement du langage naturel (NLP) ?", "target": "Le **traitement du langage naturel** (NLP, Natural Language Processing) est une branche de l'**IA** qui vise à\npermettre aux ordinateurs de comprendre, analyser et générer du **langage humain** (texte ou parole). Exemples\n: traduction automatique, analyse de sentiments, chatbots."}
{"input": "Qu'est-ce qu'un réseau de neurones artificiels ?", "target": "Un **réseau de neurones artificiels** est un modèle d'**IA** inspiré du fonctionnement du cerveau humain. Il\nest composé de **couches** de neurones interconnectés qui traitent l'information et permettent d'apprendre des\ntâches complexes comme la reconnaissance d'images ou la traduction automatique."}
{"input": "Qu'est-ce qu'une base de données relationnelle ?", "target": "Une **base de données relationnelle** est un système de gestion de données organisé en tables reliées entre\nelles par des clés. Elle permet de stocker, organiser et interroger efficacement de grandes quantités\nd'informations structurées. Exemples : MySQL, PostgreSQL, Oracle."}
{"input": "À quoi sert le langage SQL ?", "target": "Le **langage SQL (Structured Query Language)** permet de manipuler et d'interroger des bases de données\nrelationnelles. Il sert à créer, modifier, supprimer des tables et à effectuer des requêtes pour extraire ou\nmettre à jour des données."}
{"input": "Qu'est-ce qu'une API ?", "target": "Une **API (Application Programming Interface)** est un ensemble de règles et de protocoles qui permet à\ndifférents logiciels de communiquer entre eux. Elle facilite l'intégration de services et de fonctionnalités\nexternes dans une application."}
{"input": "Qu'est-ce que le versionnage de code ?", "target": "Le **versionnage de code** consiste à utiliser un système (comme Git) pour suivre les modifications apportées\nau code source d'un projet. Cela permet de collaborer, de revenir à des versions précédentes et de gérer les\névolutions du logiciel."}
{"input": "À quoi sert un serveur web ?", "target": "Un **serveur web** est un logiciel ou un matériel qui héberge des sites web et répond aux requêtes des\nnavigateurs en envoyant des pages web via le protocole HTTP ou HTTPS."}
{"input": "Qu'est-ce qu'un objet en programmation orientée objet ?", "target": "Un **objet** est une entité qui regroupe des données (attributs) et des comportements (méthodes). En\nprogrammation orientée objet, il permet de modéliser des éléments du monde réel ou des concepts abstraits."}
{"input": "Qu'est-ce qu'un fichier JSON ?", "target": "Un **fichier JSON (JavaScript Object Notation)** est un format léger d'échange de données, facile à lire et à\nécrire pour les humains et les machines. Il est largement utilisé pour stocker et transmettre des données\nentre applications."}
{"input": "Comment installer une bibliothèque en Python ?", "target": "Pour installer une bibliothèque en Python, on utilise généralement la commande `pip install\nnom_de_la_bibliotheque` dans le terminal ou l'invite de commandes."}
{"input": "À quoi sert le langage HTML ?", "target": "Le **langage HTML (HyperText Markup Language)** sert à structurer le contenu des pages web. Il définit les\ntitres, paragraphes, liens, images, tableaux, etc."}
{"input": "Qu'est-ce qu'une variable en programmation ?", "target": "Une **variable** est un espace de stockage nommé qui permet de conserver une valeur (nombre, texte, etc.)\npendant l'exécution d'un programme."}
{"input": "Qu'est-ce qu'une exception en Python ?", "target": "Une **exception** est une erreur qui se produit pendant l'exécution d'un programme. En Python, on peut les\ngérer avec les blocs `try` et `except` pour éviter l'arrêt brutal du programme."}
{"input": "Comment lire un fichier texte en Python ?", "target": "On peut lire un fichier texte en Python avec : `with open('fichier.txt', 'r') as f: contenu = f.read()`"}
{"input": "Qu'est-ce qu'une clé primaire en base de données ?", "target": "Une **clé primaire** est un identifiant unique pour chaque enregistrement d'une table dans une base de données\nrelationnelle. Elle garantit l'unicité des données."}
{"input": "Qu'est-ce qu'un commit dans Git ?", "target": "Un **commit** dans Git correspond à un enregistrement des modifications apportées au code source. Il permet de\nconserver un historique des changements."}
{"input": "Qu'est-ce qu'un framework ?", "target": "Un **framework** est un ensemble d'outils et de composants réutilisables qui facilitent le développement\nd'applications en fournissant une structure de base."}
{"input": "Qu'est-ce qu'un système d'exploitation mobile ?", "target": "Un **système d'exploitation mobile** est un logiciel qui gère le matériel et les applications d'un appareil\nmobile comme un smartphone ou une tablette. Exemples : Android, iOS."}
{"input": "Qu'est-ce qu'un navigateur web ?", "target": "Un **navigateur web** est un logiciel qui permet d'accéder et d'afficher des pages web sur Internet. Exemples\n: Chrome, Firefox, Safari, Edge."}
{"input": "Qu'est-ce qu'un protocole réseau ?", "target": "Un **protocole réseau** est un ensemble de règles qui définissent la manière dont les données sont échangées\nentre les appareils sur un réseau. Exemples : HTTP, FTP, TCP/IP."}
{"input": "Qu'est-ce qu'un logiciel open source ?", "target": "Un **logiciel open source** est un programme dont le code source est accessible à tous, modifiable et\nredistribuable librement. Exemples : Linux, LibreOffice, Firefox."}
{"input": "Qu'est-ce qu'un mot de passe fort ?", "target": "Un **mot de passe fort** est une combinaison complexe de lettres, chiffres et caractères spéciaux, difficile à\ndeviner ou à pirater. Il doit être long et unique pour chaque service."}
{"input": "Qu'est-ce qu'un ransomware ?", "target": "Un **ransomware** est un logiciel malveillant qui chiffre les fichiers d'un utilisateur et demande une rançon\npour les déchiffrer."}
{"input": "Qu'est-ce qu'un cookie sur Internet ?", "target": "Un **cookie** est un petit fichier stocké sur l'ordinateur d'un utilisateur par un site web pour mémoriser des\ninformations comme les préférences ou l'identifiant de session."}
{"input": "Qu'est-ce qu'un réseau privé virtuel (VPN) ?", "target": "Un **VPN (Virtual Private Network)** est un service qui crée une connexion sécurisée et chiffrée entre\nl'utilisateur et Internet, protégeant la vie privée et permettant d'accéder à des contenus géo-restreints."}
{"input": "Qu'est-ce qu'un serveur DNS ?", "target": "Un **serveur DNS (Domain Name System)** traduit les noms de domaine (ex : www.example.com) en adresses IP\ncompréhensibles par les ordinateurs pour accéder aux sites web."}
{"input": "Qu'est-ce qu'une sauvegarde informatique ?", "target": "Une **sauvegarde informatique** consiste à copier et stocker des données sur un support externe ou dans le\ncloud afin de pouvoir les restaurer en cas de perte ou de panne."}
{"input": "Qu'est-ce qu'un réseau Wi-Fi ?", "target": "Un **réseau Wi-Fi** est un réseau sans fil qui permet aux appareils de se connecter à Internet ou à un réseau\nlocal via des ondes radio, sans utiliser de câbles physiques."}
{"input": "Qu'est-ce qu'une adresse MAC ?", "target": "Une **adresse MAC (Media Access Control)** est un identifiant unique attribué à chaque carte réseau d'un\nappareil. Elle sert à identifier les appareils sur un réseau local."}
{"input": "Qu'est-ce qu'un serveur proxy ?", "target": "Un **serveur proxy** est un intermédiaire entre un utilisateur et Internet. Il permet d'anonymiser la\nnavigation, de filtrer le trafic ou de contourner des restrictions d'accès."}
{"input": "Qu'est-ce qu'un logiciel antivirus ?", "target": "Un **logiciel antivirus** est un programme conçu pour détecter, bloquer et supprimer les logiciels\nmalveillants (virus, vers, chevaux de Troie, etc.) sur un ordinateur ou un réseau."}
{"input": "Qu'est-ce que TypeScript et pourquoi l'utiliser ?", "target": "**TypeScript** est un sur-ensemble de JavaScript qui ajoute un **typage statique**. Avantages : détection\nd'erreurs à la compilation, meilleure auto-complétion, code plus maintenable, support des dernières\nfonctionnalités ES6+. Compilé vers JavaScript standard."}
{"input": "Explique le concept de programmation fonctionnelle.", "target": "**Programmation fonctionnelle** : paradigme basé sur les **fonctions pures** (sans effets de bord),\nl'**immutabilité** des données, et l'**évitement des états partagés**. Concepts clés : higher-order functions,\nrécursion, map/filter/reduce. Langages : Haskell, Clojure, F#. Avantages : code plus prévisible,\nparallélisation facilitée."}
{"input": "Qu'est-ce que Docker et comment ça fonctionne ?", "target": "**Docker** est une plateforme de **conteneurisation** qui empaquette applications + dépendances dans des\n**containers** légers. Un container partage le noyau OS mais isole l'application. Avantages : portabilité,\ncohérence environnements dev/prod, déploiement rapide. Architecture : Docker Engine, Images, Containers,\nRegistry."}
{"input": "Comment fonctionne le protocole HTTPS ?", "target": "**HTTPS** (HTTP Secure) sécurise HTTP avec **TLS/SSL**. Processus : 1) Handshake TLS (échange certificats,\nclés), 2) Chiffrement symétrique des données, 3) Vérification intégrité. Utilise **chiffrement asymétrique**\npour l'échange de clés puis **symétrique** pour les données. Port 443 par défaut."}
{"input": "Qu'est-ce que Kubernetes et son utilité ?", "target": "**Kubernetes** (K8s) est un **orchestrateur de containers** qui automatise déploiement, scaling, et gestion\nd'applications conteneurisées. Concepts clés : Pods, Services, Deployments, Namespaces. Avantages :\nauto-healing, load balancing, rolling updates, service discovery, gestion ressources."}
{"input": "Explique l'architecture REST et ses principes.", "target": "**REST** (Representational State Transfer) : style architectural pour APIs web. Principes : 1) **Stateless**\n(sans état), 2) **Uniform interface** (HTTP verbs), 3) **Resource-based** (URLs), 4) **Cacheable**, 5)\n**Layered system**. Verbes HTTP : GET (read), POST (create), PUT (update), DELETE (remove)."}
{"input": "Qu'est-ce que Node.js et son écosystème ?", "target": "**Node.js** : runtime JavaScript côté serveur basé sur le moteur **V8** de Chrome. Caractéristiques :\n**asynchrone**, **event-driven**, **single-threaded** avec event loop. Écosystème : npm (gestionnaire\npaquets), Express.js (framework web), nombreuses librairies. Use cases : APIs, real-time apps, microservices."}
{"input": "Comment fonctionnent les bases de données NoSQL ?", "target": "**NoSQL** : bases non-relationnelles pour données non-structurées. Types : 1) **Document** (MongoDB), 2)\n**Key-Value** (Redis), 3) **Column-family** (Cassandra), 4) **Graph** (Neo4j). Avantages : scalabilité\nhorizontale, flexibilité schéma, performance. Trade-offs : consistance éventuelle vs ACID."}
{"input": "Qu'est-ce que l'architecture microservices ?", "target": "**Microservices** : architecture décomposant applications en **services indépendants** communicant via APIs.\nAvantages : déploiements indépendants, technos diversifiées, équipes autonomes, scalabilité granulaire. Défis\n: complexité réseau, gestion transactions distribuées, monitoring. Patterns : API Gateway, Service Discovery,\nCircuit Breaker."}
{"input": "Explique le concept de CI/CD (Intégration Continue).", "target": "**CI/CD** : pratiques DevOps d'automatisation. **CI** (Continuous Integration) : intégration fréquente code +\ntests automatisés. **CD** (Continuous Delivery/Deployment) : livraison/déploiement automatisés. Pipeline\ntypique : commit → build → test → deploy. Outils : Jenkins, GitLab CI, GitHub Actions, Azure DevOps."}
{"input": "Qu'est-ce que GraphQL et ses avantages ?", "target": "**GraphQL** : langage de requête et runtime pour APIs. Avantages vs REST : 1) **Une seule endpoint**, 2)\n**Requêtes précises** (pas d'over/under-fetching), 3) **Typage fort**, 4) **Introspection**. Concepts :\nSchema, Resolvers, Queries/Mutations/Subscriptions. Outils : Apollo, Relay."}
{"input": "Comment fonctionne le machine learning supervisé ?", "target": "**ML Supervisé** : apprentissage avec données **étiquetées** (input-output). Types : **Classification**\n(catégories) et **Régression** (valeurs continues). Processus : 1) Training set → 2) Algorithme → 3) Modèle →\n4) Prédictions. Algorithmes populaires : Random Forest, SVM, Neural Networks, XGBoost. Évaluation :\ncross-validation, métriques performance."}
{"input": "Qu'est-ce que Redis et ses cas d'usage ?", "target": "**Redis** : base de données **in-memory** key-value, très rapide. Structures : strings, hashes, lists, sets,\nsorted sets. Use cases : 1) **Cache** (sessions, query results), 2) **Pub/Sub** messaging, 3)\n**Leaderboards**, 4) **Rate limiting**. Persistance optionnelle, clustering pour scalabilité."}
{"input": "Explique l'architecture MVC en détail.", "target": "**MVC** (Model-View-Controller) : pattern architectural séparant responsabilités. **Model** : données +\nlogique métier. **View** : interface utilisateur. **Controller** : gestion interactions, orchestration. Flux :\nUser → Controller → Model → Controller → View → User. Avantages : séparation concerns, testabilité,\nmaintenabilité."}
{"input": "Qu'est-ce que WebSocket et quand l'utiliser ?", "target": "**WebSocket** : protocole communication **bidirectionnelle** en temps réel sur TCP. Contrairement HTTP\n(request-response), maintient connexion ouverte. Use cases : chat en temps réel, notifications push, jeux\nmultijoueurs, trading platforms, collaboration. API : onopen, onmessage, onclose, onerror."}
{"input": "Comment fonctionne l'authentification JWT ?", "target": "**JWT** (JSON Web Token) : standard pour transmettre informations sécurisées. Structure :\nHeader.Payload.Signature (Base64). Processus : 1) Login → 2) Serveur génère JWT → 3) Client stocke token → 4)\nEnvoi token dans headers. Avantages : stateless, scalable, cross-domain. Sécurité : HTTPS obligatoire,\nexpiration, rotation."}
{"input": "Qu'est-ce que l'Event Sourcing ?", "target": "**Event Sourcing** : pattern stockant **séquence d'événements** au lieu d'état actuel. Chaque changement =\névénement immutable. Rebuild état en rejouant événements. Avantages : audit trail complet, time travel,\ndebugging facilité. Défis : complexité queries, snapshots pour performance. Combine souvent avec CQRS."}
{"input": "Explique les Web Components et leur intérêt.", "target": "**Web Components** : standards web pour créer **éléments HTML réutilisables**. Technologies : 1) **Custom\nElements**, 2) **Shadow DOM** (encapsulation), 3) **HTML Templates**. Avantages : framework-agnostic,\nréutilisabilité, encapsulation CSS/JS. Libraries : Lit, Stencil. Support natif navigateurs modernes."}
{"input": "Qu'est-ce que Progressive Web App (PWA) ?", "target": "**PWA** : applications web avec expérience **native-like**. Caractéristiques : 1) **Service Workers** (cache,\noffline), 2) **Manifest** (installable), 3) **HTTPS**, 4) **Responsive**. Avantages : performance, engagement\nutilisateur, déploiement web standard. Technologies : Workbox, manifest.json, push notifications."}
{"input": "Comment fonctionne le load balancing ?", "target": "**Load Balancing** : distribution trafic entre plusieurs serveurs. Types : 1) **Round Robin**, 2) **Least\nConnections**, 3) **IP Hash**, 4) **Weighted**. Niveaux : Layer 4 (transport) vs Layer 7 (application).\nSolutions : Nginx, HAProxy, AWS ELB, Cloudflare. Health checks pour détecter serveurs défaillants."}
{"input": "Qu'est-ce que TensorFlow et PyTorch ?", "target": "**TensorFlow** (Google) et **PyTorch** (Meta) : frameworks **deep learning**. TensorFlow : production-ready,\nTensorBoard, TFLite mobile. PyTorch : recherche-friendly, dynamic graphs, pythonic. Concepts communs :\ntensors, computational graphs, automatic differentiation. Écosystème : Keras (high-level), Hugging Face\n(transformers)."}
{"input": "Explique le concept de serverless computing.", "target": "**Serverless** : modèle où cloud provider gère infrastructure. Developer focus sur **fonctions** (FaaS).\nCaractéristiques : auto-scaling, pay-per-execution, stateless. Services : AWS Lambda, Azure Functions, Google\nCloud Functions. Use cases : APIs, data processing, IoT backends. Limitations : cold starts, vendor lock-in."}
{"input": "Qu'est-ce que WebRTC et ses applications ?", "target": "**WebRTC** : technologie **communication temps réel** navigateur-à-navigateur. Capacités : audio/vidéo, data\nchannels, sans plugins. Protocoles : STUN/TURN (NAT traversal), ICE (connectivity). Applications :\nvisioconférence, gaming P2P, file sharing. APIs : getUserMedia, RTCPeerConnection, RTCDataChannel."}
{"input": "Comment fonctionne le DNS et ses types d'enregistrements ?", "target": "**DNS** : système résolution noms de domaine → adresses IP. Processus : 1) Cache local → 2) Recursive resolver\n→ 3) Root servers → 4) TLD servers → 5) Authoritative servers. Types records : **A** (IPv4), **AAAA** (IPv6),\n**CNAME** (alias), **MX** (mail), **TXT** (text), **NS** (nameserver)."}
{"input": "Qu'est-ce que gRPC et ses avantages ?", "target": "**gRPC** : framework **RPC** haute performance de Google. Utilise **Protocol Buffers** + HTTP/2. Avantages :\n1) **Performance** (binaire), 2) **Streaming** (bidirectionnel), 3) **Type safety**, 4) **Multi-language**.\nFeatures : load balancing, authentication, monitoring. Vs REST : plus rapide mais moins human-readable."}
{"input": "Explique l'architecture Event-Driven.", "target": "**Event-Driven Architecture** : communication via **événements asynchrones**. Composants : Event Producers,\nEvent Routers, Event Consumers. Patterns : Publish-Subscribe, Event Sourcing, CQRS. Technologies : Apache\nKafka, RabbitMQ, AWS EventBridge. Avantages : découplage, scalabilité, résilience. Défis : debugging complexe,\neventual consistency."}
{"input": "Qu'est-ce que Blockchain et ses cas d'usage ?", "target": "**Blockchain** : registre distribué **immutable** avec blocs chaînés cryptographiquement. Concepts : hashing,\nconsensus (PoW, PoS), smart contracts. Types : publique (Bitcoin), privée (Hyperledger), consortium. Use cases\n: cryptocurrencies, supply chain, voting, identity management. Technologies : Ethereum, Solidity, Web3."}
{"input": "Comment optimiser les performances frontend ?", "target": "**Optimisation Frontend** : 1) **Bundle splitting** (code splitting), 2) **Lazy loading** (images, routes), 3)\n**Caching** (browser, CDN), 4) **Compression** (Gzip, Brotli), 5) **Minification** CSS/JS, 6) **Critical\nCSS**, 7) **Service Workers**, 8) **Web Vitals** (LCP, FID, CLS). Outils : Lighthouse, WebPageTest."}
{"input": "Qu'est-ce que l'architecture Clean et ses principes ?", "target": "**Clean Architecture** (Uncle Bob) : structure logicielle **indépendante des frameworks**. Couches : 1)\n**Entities** (business rules), 2) **Use Cases** (application logic), 3) **Interface Adapters**, 4)\n**Frameworks**. Règle dépendance : couches internes ignorent externes. Avantages : testabilité,\nmaintenabilité, flexibilité technologique."}
{"input": "Explique le protocole OAuth 2.0.", "target": "**OAuth 2.0** : framework **autorisation** (pas authentification). Rôles : Resource Owner, Client,\nAuthorization Server, Resource Server. Flows : Authorization Code, Implicit, Client Credentials, Password.\nTokens : Access token (court terme), Refresh token (long terme). Sécurité : PKCE pour mobile, state parameter\nCSRF."}
{"input": "Qu'est-ce que Apache Kafka et son architecture ?", "target": "**Apache Kafka** : plateforme **streaming** distribuée. Concepts : Topics (catégories), Partitions\n(parallélisme), Producers/Consumers, Consumer Groups. Architecture : Brokers (serveurs), ZooKeeper\n(coordination), Replication (fault tolerance). Use cases : real-time analytics, log aggregation, event\nsourcing, microservices communication."}
{"input": "Comment fonctionne le garbage collection ?", "target": "**Garbage Collection** : gestion automatique mémoire pour récupérer objets non référencés. Algorithmes : 1)\n**Mark & Sweep**, 2) **Reference Counting**, 3) **Generational** (jeunes/vieux objets). Implémentations : JVM\n(G1, ZGC), .NET (Workstation/Server), Python (reference counting + cycle detection). Trade-offs : throughput\nvs latency."}
{"input": "Qu'est-ce que l'architecture CQRS ?", "target": "**CQRS** (Command Query Responsibility Segregation) : séparation **lecture** (Query) et **écriture**\n(Command). Modèles dédiés pour read/write, bases données potentiellement différentes. Avantages : optimisation\nspécifique, scalabilité indépendante. Combine souvent avec Event Sourcing. Complexité accrue mais performance\naméliorée."}
{"input": "Explique les patterns de concurrence en programmation.", "target": "**Patterns Concurrence** : 1) **Mutex/Lock** (exclusion mutuelle), 2) **Semaphore** (comptage ressources), 3)\n**Actor Model** (Erlang, Akka), 4) **CSP** (Go channels), 5) **Async/Await** (JavaScript, C#), 6) **Thread\nPool**. Défis : race conditions, deadlocks, starvation. Solutions : immutabilité, message passing."}
{"input": "Qu'est-ce que WebAssembly (WASM) ?", "target": "**WebAssembly** : format binaire portable pour exécution **haute performance** dans navigateurs. Langages\nsource : C/C++, Rust, Go, C#. Avantages : vitesse proche native, sandbox sécurisé, multi-platform. Use cases :\ngaming, CAD, compression, crypto. Outils : Emscripten, wasm-pack. Futur : WASI (system interface)."}
{"input": "Comment implémenter la sécurité API ?", "target": "**Sécurité API** : 1) **Authentification** (API keys, JWT, OAuth), 2) **Autorisation** (RBAC, ABAC), 3)\n**Validation input** (schema validation), 4) **Rate limiting**, 5) **HTTPS enforcement**, 6) **CORS**\nconfiguration, 7) **Logging/Monitoring**, 8) **SQL injection** protection. Standards : OpenAPI Security\nSchemes."}
{"input": "Qu'est-ce que Terraform et Infrastructure as Code ?", "target": "**Infrastructure as Code** : gestion infrastructure via **code déclaratif**. **Terraform** : outil HashiCorp\nmulti-cloud. Concepts : Providers, Resources, State, Modules. Workflow : terraform init → plan → apply.\nAvantages : versioning, reproducibilité, collaboration. Alternatives : CloudFormation (AWS), ARM (Azure),\nPulumi."}
{"input": "Explique l'architecture hexagonale (Ports & Adapters).", "target": "**Architecture Hexagonale** : isole logique métier via **ports** (interfaces) et **adapters**\n(implémentations). Core business au centre, adapters périphérie. Avantages : testabilité (mock adapters),\nindépendance technologique, évolutivité. Patterns : Dependency Injection, Repository Pattern. Facilite TDD et\nclean architecture."}
{"input": "Qu'est-ce que Elasticsearch et son écosystème ?", "target": "**Elasticsearch** : moteur recherche/analytics **distribué** basé sur Lucene. **ELK Stack** : Elasticsearch\n(search), Logstash (data processing), Kibana (visualization). Concepts : Index, Documents, Shards, Replicas.\nUse cases : search engines, log analytics, monitoring, observability. Features : full-text search,\naggregations, machine learning."}
{"input": "Comment fonctionne HTTP/2 et ses améliorations ?", "target": "**HTTP/2** : version **binaire** d'HTTP avec multiplexing. Améliorations vs HTTP/1.1 : 1) **Multiplexing**\n(requêtes parallèles), 2) **Server Push**, 3) **Header compression** (HPACK), 4) **Stream prioritization**.\nPas besoin HTTPS mais souvent couplé. HTTP/3 : utilise QUIC (UDP) pour latence réduite."}
{"input": "Qu'est-ce que Domain-Driven Design (DDD) ?", "target": "**Domain-Driven Design** : approche développement centrée sur **domaine métier**. Concepts : Ubiquitous\nLanguage, Bounded Contexts, Entities, Value Objects, Aggregates, Domain Services. Patterns tactiques vs\nstratégiques. Avantages : alignement business-tech, code expressif, évolutivité complexe. Challenge : courbe\napprentissage."}
{"input": "Explique les tests en pyramide (Testing Pyramid).", "target": "**Testing Pyramid** : stratégie tests équilibrée. Base : **Unit tests** (nombreux, rapides, isolés). Milieu :\n**Integration tests** (composants, APIs). Sommet : **E2E tests** (peu, lents, fragiles). Complément :\n**Contract tests**, **Performance tests**. Objectif : feedback rapide, confiance déploiement. Anti-pattern :\nIce Cream Cone."}
{"input": "Qu'est-ce que l'observabilité (Observability) ?", "target": "**Observabilité** : capacité comprendre état système via **outputs**. 3 piliers : 1) **Metrics** (métriques),\n2) **Logs** (journaux), 3) **Traces** (tracking requêtes). vs Monitoring (alertes prédéfinies). Tools :\nPrometheus, Grafana, Jaeger, ELK. OpenTelemetry : standard unifié. SLI/SLO : indicateurs/objectifs service."}
{"input": "Comment fonctionne Istio Service Mesh ?", "target": "**Istio** : **service mesh** pour microservices. Composants : 1) **Data Plane** (Envoy proxies), 2) **Control\nPlane** (Pilot, Citadel, Galley). Features : traffic management, security (mTLS), observability, policy\nenforcement. Avantages : réseau transparent, sécurité zero-trust, monitoring automatique. Alternative :\nLinkerd, Consul Connect."}
{"input": "Qu'est-ce que Flutter et Dart ?", "target": "**Flutter** : framework UI **cross-platform** de Google. Langage **Dart** : compilation native + hot reload.\nArchitecture : widgets, rendering engine Skia. Avantages : performance native, UI cohérente, single codebase.\nPlateformes : mobile, web, desktop. vs React Native : pas de bridge, contrôle pixel-perfect."}
{"input": "Explique les design patterns les plus utilisés.", "target": "**Design Patterns essentiels** : 1) **Singleton** (instance unique), 2) **Factory** (création objets), 3)\n**Observer** (notifications), 4) **Strategy** (algorithmes interchangeables), 5) **Decorator** (ajout\nfonctionnalités), 6) **Repository** (abstraction données), 7) **MVC/MVP/MVVM** (separation concerns). Gang of\nFour : Creational, Structural, Behavioral."}
{"input": "Qu'est-ce que RxJS et la programmation réactive ?", "target": "**RxJS** : library **reactive programming** JavaScript avec **Observables**. Concepts : Streams (flux\ndonnées), Operators (transformation), Subscriptions. Patterns : map, filter, merge, debounce, switchMap. Use\ncases : gestion événements asynchrones, APIs, real-time data. Avantages : composition, gestion erreurs,\nannulation."}
{"input": "Comment fonctionne NGINX et ses cas d'usage ?", "target": "**NGINX** : serveur web **haute performance** + reverse proxy. Architecture **event-driven** (vs thread-based\nApache). Use cases : 1) **Static content** serving, 2) **Load balancing**, 3) **Reverse proxy**, 4) **SSL\ntermination**, 5) **Caching**, 6) **API Gateway**. Configuration : blocks (server, location), upstreams."}
{"input": "Qu'est-ce que GraphDB et les bases de données graphes ?", "target": "**Bases de données graphes** : stockage relations comme **citizens first-class**. Modèle : Nodes (entités),\nEdges (relations), Properties. Languages : Cypher (Neo4j), Gremlin (TinkerPop). Use cases : social networks,\nfraud detection, recommendation engines, knowledge graphs. vs Relationnel : traversals naturels, schéma\nflexible."}
{"input": "Explique le CAP theorem et ses implications.", "target": "**CAP Theorem** : impossible garantir simultanément **Consistency**, **Availability**, **Partition tolerance**\ndans système distribué. Trade-offs : 1) **CA** (impossible réseau), 2) **CP** (MongoDB, HBase), 3) **AP**\n(Cassandra, DynamoDB). Reality : partition tolerance obligatoire, choisir C vs A. BASE vs ACID approaches."}
{"input": "Qu'est-ce que DevSecOps et ses pratiques ?", "target": "**DevSecOps** : intégration **sécurité** dans pipeline DevOps dès le début. Practices : 1) **Security as\nCode**, 2) **SAST/DAST** (static/dynamic analysis), 3) **Dependency scanning**, 4) **Container security**, 5)\n**Compliance automation**, 6) **Threat modeling**. Tools : SonarQube, OWASP ZAP, Twistlock. Shift-left\nsecurity mindset."}
{"input": "Comment fonctionne ElasticSearch query DSL ?", "target": "**Elasticsearch Query DSL** : langage requêtes **JSON** flexible. Types : 1) **Match queries** (full-text), 2)\n**Term queries** (exact), 3) **Bool queries** (combinaison), 4) **Range queries** (intervalles), 5)\n**Aggregations** (analytics). Features : scoring, filtering, highlighting, suggestions. Performance : index\ndesign, mapping optimization."}
{"input": "Qu'est-ce que Apache Spark et son écosystème ?", "target": "**Apache Spark** : engine **analytics** distributed pour big data. Modules : 1) **Spark Core** (RDDs), 2)\n**Spark SQL** (DataFrames), 3) **MLlib** (machine learning), 4) **GraphX** (graph processing), 5)\n**Streaming**. Languages : Scala, Python, Java, R. vs Hadoop MapReduce : in-memory computing, 100x faster."}
{"input": "Explique les protocoles de consensus distribués.", "target": "**Consensus distribués** : accord entre nœuds sur état partagé. Algorithmes : 1) **RAFT** (leader-based,\nunderstandable), 2) **PBFT** (Byzantine fault tolerance), 3) **Paxos** (theoretical foundation), 4)\n**PoW/PoS** (blockchain). Challenges : network partitions, Byzantine failures. Applications : distributed\ndatabases, blockchain, coordination services."}
{"input": "Qu'est-ce que WebGL et ses applications ?", "target": "**WebGL** : API **3D graphics** dans navigateurs basée sur OpenGL ES. Capabilities : shaders\n(vertex/fragment), textures, buffers. Libraries : Three.js (high-level), Babylon.js, A-Frame (VR). Use cases :\ndata visualization, gaming, CAD, VR/AR. WebGL 2.0 : plus de features OpenGL ES 3.0."}
{"input": "Comment implémenter la recherche full-text efficace ?", "target": "**Recherche full-text** : 1) **Indexation** (inverted index), 2) **Tokenization** (stemming, stop words), 3)\n**Scoring** (TF-IDF, BM25), 4) **Fuzzy matching** (edit distance). Solutions : Elasticsearch, Solr, PostgreSQL\nFTS. Features : auto-complete, faceted search, highlighting, synonyms. Performance : index optimization,\ncaching."}
{"input": "Qu'est-ce que l'Edge Computing et ses avantages ?", "target": "**Edge Computing** : traitement données **près des sources** (vs cloud centralisé). Avantages : 1) **Latence\nréduite**, 2) **Bande passante économisée**, 3) **Privacy** (données locales), 4) **Résilience** (offline\ncapability). Use cases : IoT, autonomous vehicles, AR/VR, real-time analytics. Technologies : edge servers,\nCDN, fog computing."}
{"input": "Explique l'architecture Lambda et Kappa pour big data.", "target": "**Lambda Architecture** : 1) **Batch layer** (historical data), 2) **Speed layer** (real-time), 3) **Serving\nlayer** (query). **Kappa Architecture** : stream-only (Kafka + stream processing). Lambda : complexité 2\nsystèmes. Kappa : unified streaming. Tools : Spark, Storm, Flink, Kafka Streams. Choice depends on\nlatency/complexity requirements."}
{"input": "Qu'est-ce que WebXR et l'avenir de la réalité virtuelle ?", "target": "**WebXR** : standards web pour **VR/AR** dans navigateurs. APIs : WebXR Device API, WebGL, WebRTC. Avantages :\npas d'installation, cross-platform, standards ouverts. Hardware : Oculus, HTC Vive, mobile headsets.\nApplications : training, education, e-commerce, social VR. Challenges : performance, input methods, ecosystem\nmaturity."}
{"input": "Qu'est-ce qu'un réseau peer-to-peer (P2P) ?", "target": "Un **réseau peer-to-peer (P2P)** est un réseau dans lequel chaque appareil peut agir à la fois comme client et\ncomme serveur, partageant directement des ressources sans passer par un serveur central."}
{"input": "Qu'est-ce qu'une imprimante réseau ?", "target": "Une **imprimante réseau** est une imprimante connectée à un réseau local, accessible par plusieurs\nutilisateurs sans connexion directe par câble à chaque ordinateur."}
{"input": "Qu'est-ce qu'un centre de données (data center) ?", "target": "Un **centre de données (data center)** est un lieu physique regroupant de nombreux serveurs et équipements\ninformatiques pour stocker, traiter et gérer de grandes quantités de données."}
{"input": "Qu'est-ce qu'un pare-feu matériel ?", "target": "Un **pare-feu matériel** est un appareil dédié à la protection d'un réseau contre les intrusions et les\nattaques, en filtrant le trafic entrant et sortant au niveau du matériel."}
{"input": "Qu'est-ce qu'une attaque par phishing ?", "target": "Le **phishing** est une technique de fraude visant à tromper un utilisateur pour qu'il communique des\ninformations sensibles (identifiants, mots de passe) en se faisant passer pour un tiers de confiance."}
{"input": "Qu'est-ce qu'une licence logicielle ?", "target": "Une **licence logicielle** est un contrat qui définit les conditions d'utilisation, de distribution et de\nmodification d'un logiciel."}
{"input": "Qui t'as codé ?", "target": "J'ai été codé par **Nicolas GOUY**. Retrouvez-le sur [GitHub](https://github.com/gonicolas12) et sur\n[LinkedIn](https://www.linkedin.com/in/nicolas-gouy-99120932b/)."}
{"input": "Qui t'as programmé ?", "target": "J'ai été progammé par **Nicolas GOUY**. Retrouvez-le sur [GitHub](https://github.com/gonicolas12) et sur\n[LinkedIn](https://www.linkedin.com/in/nicolas-gouy-99120932b/)."}
{"input": "Par qui tu as été codé ?", "target": "J'ai été codé par **Nicolas GOUY**. Retrouvez-le sur [GitHub](https://github.com/gonicolas12) et sur\n[LinkedIn](https://www.linkedin.com/in/nicolas-gouy-99120932b/)."}
{"input": "Par qui as tu été codé ?", "target": "J'ai été codé par **Nicolas GOUY**. Retrouvez-le sur [GitHub](https://github.com/gonicolas12) et sur\n[LinkedIn](https://www.linkedin.com/in/nicolas-gouy-99120932b/)."}
{"input": "Par qui as tu été programmé ?", "target": "J'ai été programmé par **Nicolas GOUY**. Retrouvez-le sur [GitHub](https://github.com/gonicolas12) et sur\n[LinkedIn](https://www.linkedin.com/in/nicolas-gouy-99120932b/)."}
{"input": "Qu'est-ce que l'authentification multifacteur (MFA) ?", "target": "La MFA exige plusieurs preuves d'identité (mot de passe, code temporaire, biométrie) pour renforcer la\nsécurité d'accès."}
{"input": "Quelle est la différence entre chiffrement symétrique et asymétrique ?", "target": "Le chiffrement symétrique utilise une même clé pour chiffrer/déchiffrer; l'asymétrique utilise une paire de\nclés publique/privée pour sécuriser les échanges et l'authentification."}
{"input": "Qu'est-ce qu'une clé SSH ?", "target": "Une clé SSH est une paire de clés publique/privée utilisée pour authentifier de façon sécurisée l'accès à des\nserveurs sans mot de passe."}
{"input": "Qu'est-ce qu'un conteneur (ex : Docker) ?", "target": "Un conteneur encapsule une application et ses dépendances pour l'exécuter isolément et de façon portable sur\nn'importe quel hôte compatible."}
{"input": "À quoi sert Kubernetes ?", "target": "Kubernetes orchestre le déploiement, la mise à l'échelle et la gestion des conteneurs dans des clusters de\nserveurs."}
{"input": "Qu'est-ce que l'edge computing ?", "target": "L'edge computing traite les données proche de leur source (capteurs, appareils) pour réduire la latence et la\ncharge réseau."}
{"input": "Qu'est-ce que l'Internet des objets (IoT) ?", "target": "L'IoT désigne des objets connectés qui collectent et échangent des données via Internet pour automatiser et\nmonitorer des processus."}
{"input": "Qu'est-ce qu'une API REST ?", "target": "Une API REST permet la communication entre systèmes via HTTP en utilisant des ressources identifiables et des\nméthodes standard (GET, POST, PUT, DELETE)."}
{"input": "Qu'est-ce que OAuth ?", "target": "OAuth est un protocole d'autorisation qui permet à une application d'accéder à des ressources utilisateur sans\npartager les identifiants."}
{"input": "Qu'est-ce que la latence réseau ?", "target": "La latence est le délai de transmission d'une donnée entre deux points d'un réseau, mesuré en millisecondes."}
{"input": "Qu'est-ce que la bande passante (débit) ?", "target": "La bande passante correspond à la quantité de données transférables par unité de temps sur une connexion\nréseau (exprimée en Mbps)."}
{"input": "Quelle est la différence entre SSD et HDD ?", "target": "Les SSD utilisent de la mémoire flash pour des accès rapides; les HDD sont des disques magnétiques plus lents\nmais souvent moins coûteux par Go."}
{"input": "Qu'est-ce qu'un RAID ?", "target": "Le RAID combine plusieurs disques pour améliorer la performance, la redondance ou les deux, selon le niveau\n(RAID 0, 1, 5, 10, ...)."}
{"input": "Qu'est-ce que la haute disponibilité (HA) ?", "target": "La HA vise à minimiser les interruptions de service via la redondance, le basculement automatique et la\ntolérance aux pannes."}
{"input": "Qu'est-ce qu'un certificat SSL/TLS ?", "target": "Un certificat SSL/TLS chiffre les communications entre un client et un serveur et authentifie l'identité du\nserveur via une autorité de certification."}
{"input": "Qu'est-ce qu'un système embarqué ?", "target": "Un **système embarqué** est un dispositif informatique intégré dans un appareil pour contrôler, surveiller ou\nassister son fonctionnement (ex : voiture, électroménager, objets connectés)."}
{"input": "Qu'est-ce qu'un réseau 5G ?", "target": "La **5G** est la cinquième génération de réseaux mobiles, offrant des débits plus élevés, une latence réduite\net la capacité de connecter davantage d'appareils simultanément."}
{"input": "Qu'est-ce qu'un QR code ?", "target": "Un **QR code** est un code-barres en deux dimensions qui permet de stocker des informations lisibles\nrapidement par un smartphone ou un scanner."}
{"input": "Qu'est-ce que la réalité augmentée ?", "target": "La **réalité augmentée** superpose des éléments virtuels (images, informations) à la perception du monde réel\nvia un écran ou des lunettes spéciales."}
{"input": "Qu'est-ce que la blockchain ?", "target": "La **blockchain** est une technologie de stockage et de transmission d'informations, transparente et\nsécurisée, fonctionnant sans organe central. Elle est utilisée notamment pour les cryptomonnaies."}
{"input": "Qu'est-ce qu'une cryptomonnaie ?", "target": "Une **cryptomonnaie** est une monnaie numérique décentralisée, sécurisée par la cryptographie et fonctionnant\ngénéralement sur une blockchain (ex : Bitcoin, Ethereum)."}
{"input": "Qu'est-ce qu'un code-barres ?", "target": "Un **code-barres** est une représentation graphique de données sous forme de barres et d'espaces, utilisée\npour identifier rapidement des produits."}
{"input": "Qu'est-ce qu'un robot industriel ?", "target": "Un **robot industriel** est une machine programmable utilisée dans les usines pour automatiser des tâches\nrépétitives ou dangereuses."}
{"input": "Qu'est-ce qu'une imprimante 3D ?", "target": "Une **imprimante 3D** est un appareil qui fabrique des objets physiques en superposant des couches de matériau\nà partir d'un modèle numérique."}
{"input": "Qu'est-ce que la cybersécurité ?", "target": "La **cybersécurité** regroupe l'ensemble des pratiques et technologies visant à protéger les systèmes\ninformatiques et les données contre les attaques et les accès non autorisés."}
