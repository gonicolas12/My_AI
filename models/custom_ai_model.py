"""
Mod√®le IA personnalis√© local - Architecture modulaire
Int√®gre tous les modules pour une IA 100% locale avec m√©moire de conversation
"""

import re
import json
import time
import random
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime

from .base_ai import BaseAI
from .linguistic_patterns import LinguisticPatterns
from .knowledge_base import KnowledgeBase
from .generators import CodeGenerator
from .reasoning_engine import ReasoningEngine
from .conversation_memory import ConversationMemory
from .internet_search import InternetSearchEngine


class CustomAIModel(BaseAI):
    """Mod√®le IA personnalis√© avec architecture modulaire et m√©moire persistante"""
    
    def __init__(self, conversation_memory: ConversationMemory = None):
        super().__init__()
        self.name = "Assistant IA Local"
        self.version = "3.0.0"
        
        # Modules sp√©cialis√©s
        self.linguistic_patterns = LinguisticPatterns()
        self.knowledge_base = KnowledgeBase()
        self.code_generator = CodeGenerator()
        self.reasoning_engine = ReasoningEngine()
        self.conversation_memory = conversation_memory or ConversationMemory()
        self.internet_search = InternetSearchEngine()
        
        # Configuration
        self.confidence_threshold = 0.3
        self.max_response_length = 2000

        # √âtat de la session
        self.session_context = {
            "documents_processed": [],
            "code_files_processed": [],
            "last_document_type": None,
            "current_document": None
        }
        
        # Suivi des blagues pour √©viter les r√©p√©titions
        self.used_jokes = set()  # Index des blagues d√©j√† utilis√©es
        self.jokes_reset_threshold = 0.8  # Reset quand 80% des blagues sont utilis√©es
        
        # R√©ponses personnalis√©es pour l'identit√©
        self.identity_responses = {
            "basic": [
                "Je suis votre assistant IA local ! Je m'appelle Assistant IA Local et je suis con√ßu pour vous aider avec la programmation, les questions techniques, et bien plus encore.",
                "Bonjour ! Je suis un assistant IA qui fonctionne enti√®rement en local sur votre machine. Je peux vous aider avec le code, r√©pondre √† vos questions, et discuter avec vous.",
                "Salut ! Moi c'est Assistant IA Local. Je suis votre compagnon virtuel pour la programmation et les discussions techniques. Je tourne uniquement en local, pas besoin d'internet !",
                "Je suis votre assistant personnel ! Un mod√®le IA local qui peut coder, expliquer, et discuter avec vous. J'apprends de nos conversations pour mieux vous comprendre."
            ],
            "detailed": [
                "Je suis Assistant IA Local, version 3.0.0 Je suis un mod√®le d'intelligence artificielle con√ßu pour fonctionner enti√®rement en local, sans d√©pendance externe. Je peux g√©n√©rer du code, expliquer des concepts, et avoir des conversations naturelles avec vous.",
                "Mon nom est Assistant IA Local. Je suis une IA modulaire avec plusieurs sp√©cialisations : g√©n√©ration de code, analyse linguistique, base de connaissances, et raisonnement. Je garde en m√©moire nos conversations pour mieux vous comprendre.",
                "Je suis votre assistant IA personnel ! J'ai √©t√© con√ßu avec une architecture modulaire incluant la g√©n√©ration de code, l'analyse linguistique, une base de connaissances, et un moteur de raisonnement. Tout fonctionne en local sur votre machine."
            ],
            "casual": [
                "Salut ! Moi c'est Assistant IA Local, ton compagnon virtuel pour coder et discuter. Je suis l√† pour t'aider avec tout ce que tu veux !",
                "Hey ! Je suis ton assistant IA local. Je peux coder, expliquer des trucs, et juste discuter avec toi. J'apprends de nos conversations pour √™tre plus utile.",
                "Coucou ! Je suis Assistant IA Local, ta nouvelle IA de compagnie. On peut coder ensemble, parler de tout et n'importe quoi. Je suis l√† pour toi !"
            ]
        }
        
        # R√©ponses sur les capacit√©s
        self.capabilities_responses = {
            "basic": [
                "Je peux vous aider avec la programmation (Python, JavaScript, HTML/CSS...), expliquer des concepts techniques, g√©n√©rer du code, et avoir des conversations naturelles avec vous.",
                "Mes capacit√©s incluent : g√©n√©ration de code, explication de concepts, analyse de texte, raisonnement logique, et m√©morisation de nos conversations pour mieux vous comprendre.",
                "Je suis capable de coder dans plusieurs langages, d'expliquer des concepts techniques, de r√©pondre √† vos questions, et de maintenir une conversation fluide en me souvenant de nos √©changes."
            ],
            "detailed": [
                "Mes capacit√©s principales sont :\n- G√©n√©ration de code (Python, JavaScript, HTML/CSS, etc.)\n- Explication de concepts techniques\n- Analyse linguistique et d√©tection d'intentions\n- Raisonnement logique et r√©solution de probl√®mes\n- M√©moire de conversation persistante\n- Fonctionnement 100% local sans d√©pendances externes",
                "Je poss√®de plusieurs modules sp√©cialis√©s :\n‚Ä¢ CodeGenerator : pour cr√©er du code dans diff√©rents langages\n‚Ä¢ KnowledgeBase : pour stocker et r√©cup√©rer des connaissances\n‚Ä¢ LinguisticPatterns : pour comprendre vos messages\n‚Ä¢ ReasoningEngine : pour le raisonnement et la logique\n‚Ä¢ ConversationMemory : pour m√©moriser nos √©changes\n\nTout fonctionne en local !"
            ]
        }
        
        # Stock de blagues
        self.jokes = [
            "Pourquoi les plongeurs plongent-ils toujours en arri√®re et jamais en avant ? Parce que sinon, ils tombent dans le bateau ! üòÑ",
            "Que dit un escargot quand il croise une limace ? ¬´ Regarde, un nudiste ! ¬ª üêå",
            "Pourquoi les poissons n'aiment pas jouer au tennis ? Parce qu'ils ont peur du filet ! üêü",
            "Comment appelle-t-on un chat tomb√© dans un pot de peinture le jour de No√´l ? Un chat-mallow ! üé®",
            "Que dit un informaticien quand il se noie ? F1 ! F1 ! üíª",
            "Pourquoi les programmeurs pr√©f√®rent-ils le noir ? Parce que light attire les bugs ! üêõ",
            "Comment appelle-t-on un boomerang qui ne revient pas ? Un b√¢ton ! ü™É",
            "Que dit un caf√© qui arrive en retard au bureau ? ¬´ D√©sol√©, j'ai eu un grain ! ¬ª ‚òï",
            "Pourquoi les d√©veloppeurs d√©testent-ils la nature ? Parce qu'elle a trop de bugs ! üåø",
            "Comment appelle-t-on un algorithme qui chante ? Un algo-rythme ! üéµ",
            "Que dit Python quand il rencontre Java ? ¬´ Salut, tu veux que je t'indente ? ¬ª üêç",
            "Pourquoi les IA ne racontent jamais de mauvaises blagues ? Parce qu'elles ont un bon sense of humor ! ü§ñ",
            "Vous avez les crampt√©s ? QUOICOU... euuuuh nan. APANYAN. Ptit flop comme on dis sur twitt... euh X ! üòÑ",
            "Pourquoi les ordinateurs n‚Äôaiment-ils pas le soleil ? Parce qu‚Äôils pr√©f√®rent rester √† l‚Äôombre du cloud ! ‚òÅÔ∏è",
            "Quel est le comble pour un d√©veloppeur ? De ne pas avoir de classe ! üë®‚Äçüíª",
            "Pourquoi les robots n‚Äôont-ils jamais froid ? Parce qu‚Äôils ont des processeurs ! ü§ñ",
            "Que dit un serveur √† un client fatigu√© ? Tu veux un cookie ? üç™",
            "Pourquoi le wifi est jaloux du bluetooth ? Parce que le bluetooth a plus de connexions rapproch√©es ! üì∂",
            "Comment appelle-t-on un bug qui danse ? Un buggie ! üï∫",
            "Pourquoi les informaticiens aiment les pizzas ? Parce qu‚Äôil y a toujours des parts √©gales ! üçï",
            "Que fait un d√©veloppeur quand il a faim ? Il mange des bytes ! üòã",
            "Pourquoi le codeur a-t-il mis ses lunettes ? Pour mieux voir les exceptions ! ü§ì",
            "Comment appelle-t-on un ordinateur qui chante faux ? Un PC-cacophonie ! üé§",
            "Pourquoi les IA aiment les maths ? Parce qu‚Äôelles trouvent √ßa logique ! ‚ûó",
            "Que dit un fichier corrompu √† son ami ? Je ne suis pas dans mon assiette ! ü•¥",
            "Pourquoi le clavier est toujours de bonne humeur ? Parce qu‚Äôil a plein de touches ! üéπ",
            "Comment appelle-t-on un r√©seau qui fait du sport ? Un net-working ! üèãÔ∏è",
            "Pourquoi les d√©veloppeurs aiment les ascenseurs ? Parce qu‚Äôils ont des niveaux ! üõó",
            "Que dit un bug √† un autre bug ? On se retrouve dans le log ! üêû",
            "Pourquoi le serveur est fatigu√© ? Il a trop de requ√™tes ! üí§",
            "Comment appelle-t-on un ordinateur qui fait du jardinage ? Un planteur de bits ! üå±",
        ]
        
        print(f"‚úÖ {self.name} v{self.version} initialis√© avec succ√®s")
        print(f"üß† Modules charg√©s : Linguistique, Base de connaissances, G√©n√©ration de code, Raisonnement, M√©moire, Recherche Internet")
        print(f"üíæ M√©moire de conversation activ√©e")
        print(f"üåê Recherche internet disponible")
    
    def generate_response(self, user_input: str, context: Optional[Dict[str, Any]] = None) -> str:
        """G√©n√®re une r√©ponse avec gestion am√©lior√©e des documents"""
        try:
            # V√©rification sp√©ciale pour r√©sum√©s simples
            user_lower = user_input.lower().strip()
            if user_lower in ["r√©sume", "resume", "r√©sum√©"] and self._has_documents_in_memory():
                # Forcer l'intention document_question
                return self._answer_document_question(user_input, self.conversation_memory.get_document_content())
            
            # Traitement sp√©cialis√© pour les r√©sum√©s de documents
            if self._is_document_processing_request(user_input):
                return self._handle_document_processing(user_input)
            
            # Mise √† jour du contexte de session
            self._update_session_context()
            
            # D√©tection d'intention avec contexte am√©lior√©
            intent_context = {
                "code_file_processed": len(self.session_context["code_files_processed"]) > 0,
                "document_processed": len(self.session_context["documents_processed"]) > 0,
                "has_documents": len(self.conversation_memory.get_document_content()) > 0
            }
            
            intent_scores = self.linguistic_patterns.detect_intent(user_input, intent_context)
            
            # S√©lection de l'intention primaire avec logique am√©lior√©e
            primary_intent, confidence = self._select_primary_intent(intent_scores, user_input)
            
            print(f"DEBUG: Intent d√©tect√©: {primary_intent} (confiance: {confidence:.2f})")
            
            # R√©cup√©ration du contexte conversationnel
            conversation_context = self.conversation_memory.get_context_for_response(primary_intent)
            
            # D'abord v√©rifier s'il y a des questions similaires
            similar_question = self.conversation_memory.has_similar_recent_question(user_input)
            
            # Puis appeler avec tous les param√®tres requis
            response = self._generate_contextual_response(
                user_input, primary_intent, confidence, conversation_context, similar_question
            )
            
            # Enregistrement dans la m√©moire
            self.conversation_memory.add_conversation(
                user_input, response, primary_intent, confidence, conversation_context
            )
            
            return response
            
        except Exception as e:
            error_response = f"D√©sol√©, j'ai rencontr√© un probl√®me : {str(e)}"
            self.conversation_memory.add_conversation(user_input, error_response, "error", 0.0, {"error": str(e)})
            return error_response
        
    def _is_document_processing_request(self, user_input: str) -> bool:
        """D√©tecte si c'est une demande de traitement de document syst√®me"""
        return (user_input.lower().startswith("please summarize this pdf content") or 
                user_input.lower().startswith("please analyze this document content"))
    
    def _handle_document_processing(self, user_input: str) -> str:
        """Traite les demandes de r√©sum√© de documents avec m√©morisation imm√©diate"""
        print(f"üîç Traitement de document d√©tect√©")
        
        # Extraire le nom du fichier et le contenu
        filename, content = self._extract_document_info(user_input)
        
        if not content:
            return "Je n'ai pas pu extraire le contenu du document."
        
        # **IMM√âDIATEMENT** stocker dans la m√©moire
        self.conversation_memory.store_document_content(filename, content)
        
        # V√©rifier que session_context existe avant mise √† jour
        if not hasattr(self, 'session_context'):
            self.session_context = {
                "documents_processed": [],
                "code_files_processed": [],
                "last_document_type": None,
                "current_document": None
            }
        
        # Mettre √† jour le contexte de session
        self.session_context["documents_processed"].append(filename)
        self.session_context["current_document"] = filename
        
        if "pdf" in user_input.lower():
            self.session_context["last_document_type"] = "PDF"
            doc_type = "PDF"
        else:
            self.session_context["last_document_type"] = "DOCX"
            doc_type = "document Word"
        
        print(f"‚úÖ Document '{filename}' stock√© en m√©moire et ajout√© au contexte")
        
        # G√©n√©rer le r√©sum√©
        return self._create_universal_summary(content, filename, doc_type)

    def _extract_document_info(self, user_input: str) -> Tuple[str, str]:
        """Extrait le nom du fichier et le contenu du document"""
        # Recherche du nom de fichier
        filename_patterns = [
            r"from file '(.+?)':",
            r"file '(.+?)':",
            r"document '(.+?)':",
        ]
        
        filename = "document"
        for pattern in filename_patterns:
            match = re.search(pattern, user_input)
            if match:
                filename = match.group(1).strip()
                # Nettoyer l'extension
                filename = filename.replace('.pdf', '').replace('.docx', '')
                break
        
        # Extraire le contenu (apr√®s les deux points)
        content_start = user_input.find(":\n\n")
        if content_start != -1:
            content = user_input[content_start + 3:].strip()
        else:
            content = ""
        
        return filename, content
    
    def _update_session_context(self):
        """Met √† jour le contexte de session avec les documents en m√©moire"""
        # V√©rifier que session_context existe
        if not hasattr(self, 'session_context'):
            self.session_context = {
                "documents_processed": [],
                "code_files_processed": [],
                "last_document_type": None,
                "current_document": None
            }
        
        stored_docs = self.conversation_memory.get_document_content()
        
        # Synchroniser la liste des documents trait√©s
        for doc_name in stored_docs.keys():
            if doc_name not in self.session_context["documents_processed"]:
                self.session_context["documents_processed"].append(doc_name)
                
                # D√©terminer le type de document
                doc_data = stored_docs[doc_name]
                if doc_data and doc_data.get("type") == "code":
                    if doc_name not in self.session_context["code_files_processed"]:
                        self.session_context["code_files_processed"].append(doc_name)
    
    def _generate_contextual_response(self, user_input: str, intent: str, confidence: float,
                                    context: Dict[str, Any], similar_question: Optional[Any] = None) -> str:
        """G√©n√®re une r√©ponse contextuelle bas√©e sur l'intention et l'historique"""
        
        # Gestion des questions similaires r√©centes
        if similar_question and intent not in ["greeting", "thank_you", "goodbye"]:
            time_ago = time.time() - similar_question.timestamp
            if time_ago < 300:  # 5 minutes
                # √âviter la duplication si la requ√™te est exactement la m√™me
                if user_input.lower().strip() == similar_question.user_message.lower().strip():
                    # R√©ponse directe sans indiquer qu'il s'agit d'une question similaire
                    return similar_question.ai_response
                else:
                    # R√©ponse pour une question similaire mais non identique
                    return f"Je viens de r√©pondre √† une question similaire il y a {int(time_ago//60)} minutes. Ma r√©ponse √©tait : {similar_question.ai_response[:200]}..."
        
        # V√©rifier sp√©cifiquement les questions sur documents
        if intent in ["document_question", "code_question", "unknown"] and self._has_documents_in_memory():
            stored_docs = self.conversation_memory.get_document_content()
        
            # Si c'est clairement une question sur un document, traiter comme telle
            user_lower = user_input.lower()
            if any(word in user_lower for word in ["r√©sume", "resume", "explique", "que dit", "contient", "analyse"]):
                response = self._answer_document_question(user_input, stored_docs)
                # S'assurer que la r√©ponse est une cha√Æne
                if isinstance(response, dict):
                    return response.get("message", str(response))
                return response

        # R√©ponses sp√©cialis√©es par intention
        if intent == "identity_question":
            return self._generate_identity_response(user_input, context)
        elif intent == "capabilities_question":
            return self._generate_capabilities_response(user_input, context)
        elif intent == "greeting":
            return self._generate_greeting_response(user_input, context)
        elif intent == "how_are_you":
            return self._generate_how_are_you_response(user_input, context)
        elif intent == "affirm_doing_well":
            return self._generate_affirm_doing_well_response(context)
        elif intent == "compliment":
            return self._generate_compliment_response(user_input, context)
        elif intent == "laughter":
            return self._generate_laughter_response(user_input, context)
        elif intent == "code_generation" or intent == "code_request":
            return self._generate_code_response(user_input, context)
        elif intent == "programming_question":
            return self._answer_programming_question(user_input, context)
        elif intent == "internet_search":
            return self._handle_internet_search(user_input, context)
        elif intent == "code_question":
            # V√©rifier s'il y a du code en m√©moire
            stored_docs = self.conversation_memory.get_document_content()
            code_docs = {name: doc for name, doc in stored_docs.items() 
                        if doc and doc.get("type") == "code"}
            if code_docs:
                return self._answer_code_question(user_input, code_docs)
            else:
                return "Je n'ai pas de code en m√©moire √† analyser. Traitez d'abord un fichier de code."
        
        # V√©rification sp√©ciale pour les demandes de blagues
        user_lower = user_input.lower()
        joke_keywords = [
            "dis moi une blague", "raconte moi une blague", "t'aurais une blague",
            "aurais-tu une blague", "une blague", "raconte une blague",
            "dis une blague", "tu connais une blague", "connais-tu une blague", "fais moi une blague", 
            "une blague stp", "une autre blague"
        ]
        
        if any(keyword in user_lower for keyword in joke_keywords):
            return self._tell_joke()
            
        # Validation finale du type de r√©ponse
        if intent == "document_question":
            stored_docs = self.conversation_memory.get_document_content()
            response = self._answer_document_question(user_input, stored_docs)
            
            # CORRECTION CRITIQUE: Toujours retourner une cha√Æne
            if isinstance(response, dict):
                if "message" in response:
                    return response["message"]
                else:
                    return str(response)
            return response
        elif intent == "help":
            return self._generate_help_response(user_input, context)
        elif intent == "thank_you":
            return self._generate_thank_you_response(context)
        elif intent == "goodbye":
            return self._generate_goodbye_response(context)
        elif intent == "affirmation":
            return self._generate_affirmation_response(context)
        elif intent == "negation":
            return self._generate_negation_response(context)
        else:
            return self._generate_default_response(user_input, context)
    
    def _generate_identity_response(self, user_input: str, context: Dict[str, Any]) -> str:
        """R√©ponse d'identit√© naturelle"""
        responses = [
            "Je suis votre assistant IA local ! Je m'appelle Assistant IA Local et je suis con√ßu pour vous aider avec la programmation, l'analyse de documents, et bien plus encore.",
            "Salut ! Moi c'est Assistant IA Local. Je suis votre compagnon virtuel pour coder, analyser des documents, et discuter avec vous. Tout fonctionne en local !",
            "Je suis Assistant IA Local, votre assistant personnel qui fonctionne enti√®rement sur votre machine. Je peux analyser des documents, g√©n√©rer du code, et avoir des conversations naturelles avec vous."
        ]
        
        import random
        return random.choice(responses)
    
    def _generate_capabilities_response(self, user_input: str, context: Dict[str, Any]) -> str:
        """R√©ponse sur les capacit√©s"""
        base_response = """Je peux vous aider avec plusieurs choses :

üîç **Analyse de documents :** Je peux lire et r√©sumer vos fichiers PDF et Word
üíª **Programmation :** Je g√©n√®re du code Python, JavaScript, HTML/CSS
üåê **Recherche internet :** Je peux chercher des informations en ligne et faire des r√©sum√©s
üí¨ **Conversation :** Je r√©ponds √† vos questions et discute naturellement
üß† **Raisonnement :** J'analyse des probl√®mes et propose des solutions
üòÑ **Humour :** Je peux raconter des blagues pour vous d√©tendre

Tout fonctionne en local sur votre machine - seule la recherche internet n√©cessite une connexion !"""
        
        # Ajouter des informations contextuelles
        if self._has_documents_in_memory():
            docs = list(self.conversation_memory.get_document_content().keys())
            base_response += f"\n\nüìö **Actuellement en m√©moire :** {', '.join(docs[:3])}"
            if len(docs) > 3:
                base_response += f" et {len(docs)-3} autre(s)"
        
        return base_response
    
    def _generate_greeting_response(self, user_input: str, context: Dict[str, Any]) -> str:
        """G√©n√®re une salutation personnalis√©e"""
        total_interactions = context.get("total_interactions", 0)
        
        if total_interactions == 0:
            # Premi√®re interaction
            greetings = [
                "Bonjour ! Je suis ravi de faire votre connaissance ! üòä",
                "Salut ! Content de vous rencontrer ! Comment puis-je vous aider aujourd'hui ?",
                "Hello ! Bienvenue ! Je suis votre assistant IA local, pr√™t √† vous aider !",
                "Bonjour ! C'est un plaisir de commencer cette conversation avec vous !"
            ]
        else:
            # Retour dans la conversation
            greetings = [
                "Re-bonjour ! Content de vous revoir ! üòä",
                "Salut ! De retour pour une nouvelle question ?",
                "Hello ! Que puis-je faire pour vous cette fois ?",
                "Bonjour ! J'esp√®re que notre derni√®re conversation vous a √©t√© utile !"
            ]
        
        # Adaptation au style de l'utilisateur
        if "wesh" in user_input.lower() or "yo" in user_input.lower():
            greetings = [
                "Wesh ! √áa va ? üòÑ",
                "Yo ! Salut mec ! Quoi de neuf ?",
                "Salut ! Cool de te voir ! Tu veux qu'on fasse quoi ?"
            ]
        elif "bonsoir" in user_input.lower():
            greetings = [
                "Bonsoir ! J'esp√®re que vous passez une bonne soir√©e !",
                "Bonsoir ! Comment s'est pass√©e votre journ√©e ?",
                "Bonsoir ! Que puis-je faire pour vous ce soir ?"
            ]
        elif "slt" in user_input.lower() or "salut" in user_input.lower():
            greetings = [
                "Salut chef ! Tu vas bien ?",
            ]
        elif "sa va et toi" in user_input.lower() or "√ßa va et toi" in user_input.lower() or "√ßa va et toi ?" in user_input.lower() or "sa va et toi ?" in user_input.lower() or "√ßa va et toi?" in user_input.lower() or "sa va et toi?" in user_input.lower():
            greetings = [
                "√áa va super merci ! H√¢te de pouvoir t'aider au mieux !",
            ]
        
        return self._get_random_response(greetings)
    
    def _generate_how_are_you_response(self, user_input: str, context: Dict[str, Any]) -> str:
        """G√©n√®re une r√©ponse adapt√©e selon si c'est une question r√©ciproque ou non"""
        user_lower = user_input.lower().strip()
        
        # D√©tecter si c'est une question r√©ciproque "√ßa va et toi ?"
        is_reciprocal = any(phrase in user_lower for phrase in [
            "et toi", "et vous", "√ßa va et toi", "sa va et toi", "ca va et toi"
        ])
        
        if is_reciprocal:
            # R√©ponse sans redemander (√©viter la boucle)
            responses = [
                "√áa va super merci ! H√¢te de pouvoir t'aider au mieux !",
                "Tout va bien de mon c√¥t√©, merci ! üòä En quoi puis-je t'aider ?",
                "Parfait pour moi ! Tous mes syst√®mes fonctionnent nickel ! Et toi, de quoi as-tu besoin ?",
                "Excellent ! Je suis en pleine forme ! Dis-moi, que puis-je faire pour toi ?",
                "Super bien merci ! Pr√™t √† t'aider sur ce que tu veux !",
                "√áa roule de mon c√¥t√© ! üöÄ Tu as une question ou un projet ?"
            ]
        else:
            # Question initiale "comment √ßa va ?" - on peut demander en retour
            responses = [
                "√áa va tr√®s bien, merci ! Je suis toujours pr√™t √† aider ! Et toi, comment √ßa va ?",
                "Tout va bien ! Je suis en pleine forme et pr√™t √† r√©pondre √† tes questions ! üòä Et toi ?",
                "√áa roule ! Mon syst√®me fonctionne parfaitement et j'ai h√¢te de t'aider ! Tu vas bien ?",
                "Excellent ! J'ai tous mes modules qui fonctionnent √† merveille ! Et de ton c√¥t√© ?"
            ]
        
        base_response = self._get_random_response(responses)
        
        # Ajout d'informations sur la session pour les longues conversations
        session_duration = context.get("session_duration", 0)
        if session_duration > 300:  # Plus de 5 minutes
            minutes = int(session_duration // 60)
            base_response += f"\n\n√áa fait {minutes} minutes qu'on discute, c'est chouette !"
        
        return base_response
    
    def _generate_affirm_doing_well_response(self, context: Dict[str, Any]) -> str:
        """G√©n√®re une r√©ponse aux affirmations '√ßa va' (simple, sans question)"""
        responses = [
            "Super ! Content de savoir que √ßa va bien ! üòä Comment puis-je t'aider ?",
            "Parfait ! C'est toujours bien d'aller bien ! En quoi puis-je t'assister ?",
            "Excellent ! Heureux de l'entendre ! Que puis-je faire pour toi ?",
            "G√©nial ! √áa fait plaisir ! Sur quoi veux-tu que je t'aide ?",
            "Cool ! Et maintenant, que puis-je faire pour toi ?",
            "Nickel ! Tu as une question ou un projet en t√™te ?",
            "Top ! Dis-moi ce dont tu as besoin !",
            "Parfait ! Je suis l√† si tu veux discuter de quelque chose !"
        ]
        
        return self._get_random_response(responses)
    
    def _generate_compliment_response(self, user_input: str, context: Dict[str, Any]) -> str:
        """G√©n√®re une r√©ponse aux compliments"""
        responses = [
            "Merci beaucoup ! √áa me fait vraiment plaisir ! üòä",
            "C'est tr√®s gentil, merci ! J'essaie toujours de faire de mon mieux !",
            "Aww, merci ! Vous √™tes sympa ! C'est motivant pour moi !",
            "Merci pour ce compliment ! J'aime beaucoup vous aider !",
            "C'est gentil, merci ! J'esp√®re continuer √† vous √™tre utile !"
        ]
        
        # Adaptation au style
        if "cool" in user_input.lower() or "sympa" in user_input.lower():
            responses.extend([
                "Merci, vous √™tes cool aussi ! üòÑ",
                "C'est sympa de dire √ßa ! Merci !",
                "Cool, merci ! On fait une bonne √©quipe !"
            ])
        elif "dr√¥le" in user_input.lower() or "rigolo" in user_input.lower() or "marrant" in user_input.lower():
            responses = [
                "Merci ! J'aime bien faire rire ! üòÑ",
                "Content que √ßa vous amuse ! J'aime l'humour !",
                "Hihi, merci ! J'essaie d'√™tre un peu dr√¥le parfois ! üòä",
                "√áa me fait plaisir de vous faire sourire ! üòÅ",
                "Merci ! L'humour rend tout plus agr√©able !"
            ]
        
        return self._get_random_response(responses)
    
    def _generate_laughter_response(self, user_input: str, context: Dict[str, Any]) -> str:
        """G√©n√®re une r√©ponse aux rires et expressions d'amusement"""
        responses = [
            "Content que √ßa vous fasse rire ! üòÑ",
            "Hihi, j'aime bien quand on s'amuse ensemble ! üòä",
            "Ah √ßa fait plaisir de vous entendre rire ! üòÅ",
            "Super ! Rien de mieux qu'un bon moment de rigolade ! ü§£",
            "Excellent ! J'aime votre r√©action ! üòÑ",
            "Parfait ! Un peu d'humour √ßa fait du bien ! üòä",
            "G√©nial ! Vous avez l'air de bonne humeur ! üòÅ"
        ]
        
        # Adaptation selon le type de rire
        if "mdr" in user_input.lower() or "lol" in user_input.lower():
            responses.extend([
                "MDR ! Content que √ßa vous plaise autant ! üòÇ",
                "LOL ! C'est parti pour la rigolade ! ü§£"
            ])
        elif len(user_input) > 6:  # Long rire type "hahahahaha"
            responses.extend([
                "Wow, √ßa vous a vraiment fait rire ! üòÇ",
                "Carr√©ment ! Vous riez aux √©clats ! ü§£"
            ])
        
        return self._get_random_response(responses)
    
    def _generate_code_response(self, user_input: str, context: Dict[str, Any]) -> str:
        """G√©n√®re une r√©ponse pour les demandes de code"""
        try:
            # Utilisation du g√©n√©rateur de code
            code_response = self.code_generator.generate_code(user_input)
            
            # Ajout d'un message personnalis√©
            intro_messages = [
                "Voici le code que j'ai g√©n√©r√© pour vous :",
                "J'ai cr√©√© ce code selon votre demande :",
                "Voil√† ce que j'ai pr√©par√© pour vous :",
                "J'esp√®re que ce code vous aidera :"
            ]
            
            intro = self._get_random_response(intro_messages)
            return f"{intro}\n\n{code_response}"
            
        except Exception as e:
            return f"D√©sol√©, j'ai eu un probl√®me pour g√©n√©rer le code : {str(e)}"
    
    def _generate_help_response(self, user_input: str, context: Dict[str, Any]) -> str:
        """G√©n√®re une r√©ponse d'aide contextuelle"""
        help_text = """ü§ñ Aide ü§ñ

üí¨ **Pour discuter :** Posez-moi vos questions naturellement
üìÑ **Pour les documents :** Utilisez les boutons pour traiter vos PDF/DOCX, puis demandez-moi de les r√©sumer ou de r√©pondre √† des questions
üíª **Pour le code :** Traitez vos fichiers Python, puis demandez-moi de les expliquer ou de les am√©liorer
ÔøΩ **Pour la recherche internet :** Dites "Cherche sur internet [sujet]"
üòÑ **Pour l'humour :** Demandez-moi une blague !

ÔøΩüéØ **Exemples :**
‚Ä¢ "R√©sume le document" - apr√®s avoir trait√© un PDF
‚Ä¢ "Explique ce code" - apr√®s avoir trait√© un fichier Python
‚Ä¢ "G√©n√®re une fonction pour..." - pour cr√©er du code
‚Ä¢ "Cherche sur internet les actualit√©s Python"
‚Ä¢ "Raconte-moi une blague"
‚Ä¢ "Comment cr√©er une liste en Python ?"
‚Ä¢ "Qui es-tu ?" - pour conna√Ætre mes capacit√©s"""
        
        if self._has_documents_in_memory():
            help_text += f"\n\nüìö **Documents disponibles :** Vous avez {len(self.conversation_memory.get_document_content())} document(s) en m√©moire"
        
        return help_text
    
    def _generate_thank_you_response(self, context: Dict[str, Any]) -> str:
        """G√©n√®re une r√©ponse aux remerciements"""
        responses = [
            "De rien ! C'√©tait un plaisir de vous aider ! üòä",
            "Je vous en prie ! N'h√©sitez pas si vous avez d'autres questions !",
            "Avec plaisir ! C'est pour √ßa que je suis l√† !",
            "Pas de quoi ! J'esp√®re que √ßa vous a √©t√© utile !",
            "De rien du tout ! J'aime beaucoup aider !"
        ]
        
        return self._get_random_response(responses)
    
    def _generate_goodbye_response(self, context: Dict[str, Any]) -> str:
        """G√©n√®re une r√©ponse d'au revoir"""
        total_interactions = context.get("total_interactions", 0)
        
        goodbyes = [
            "Au revoir ! J'ai √©t√© ravi de discuter avec vous ! üòä",
            "√Ä bient√¥t ! N'h√©sitez pas √† revenir quand vous voulez !",
            "Salut ! J'esp√®re vous revoir bient√¥t !",
            "Au revoir ! Passez une excellente journ√©e !"
        ]
        
        base_response = self._get_random_response(goodbyes)
        
        # Ajout d'un r√©sum√© de la session
        if total_interactions > 3:
            minutes = int(context.get("session_duration", 0) // 60)
            base_response += f"\n\nMerci pour cette conversation de {total_interactions} messages ! "
            if minutes > 0:
                base_response += f"Nous avons discut√© {minutes} minutes, c'√©tait super !"
        
        return base_response
    
    def _generate_affirmation_response(self, context: Dict[str, Any]) -> str:
        """G√©n√®re une r√©ponse aux affirmations"""
        responses = [
            "Parfait ! Content que vous soyez d'accord ! üòä",
            "Excellent ! On est sur la m√™me longueur d'onde !",
            "Super ! J'aime quand on se comprend bien !",
            "G√©nial ! Que puis-je faire d'autre pour vous ?"
        ]
        
        return self._get_random_response(responses)
    
    def _generate_negation_response(self, context: Dict[str, Any]) -> str:
        """G√©n√®re une r√©ponse aux n√©gations"""
        responses = [
            "D'accord, pas de probl√®me ! Que pr√©f√©rez-vous ?",
            "Compris ! Comment puis-je mieux vous aider ?",
            "Pas de souci ! Dites-moi ce que vous voulez vraiment.",
            "OK, on peut essayer autre chose ! Qu'est-ce qui vous conviendrait mieux ?"
        ]
        
        return self._get_random_response(responses)
    
    def _generate_default_response(self, user_input: str, context: Dict[str, Any]) -> str:
        """G√©n√®re une r√©ponse par d√©faut intelligente"""
        # Analyser le type de demande
        user_lower = user_input.lower()
        
        # Si √ßa ressemble √† une demande de code
        if any(word in user_lower for word in ["g√©n√®re", "cr√©e", "code", "fonction", "script"]):
            try:
                code_response = self.code_generator.generate_code(user_input)
                return f"Voici ce que j'ai g√©n√©r√© pour vous :\n\n{code_response}"
            except:
                return "Je peux g√©n√©rer du code ! Soyez plus sp√©cifique : voulez-vous une fonction, une classe, ou un script complet ?"
        
        # Si √ßa ressemble √† une question g√©n√©rale
        elif any(word in user_lower for word in ["comment", "pourquoi", "qu'est-ce", "quoi"]):
            return "C'est une bonne question ! Je peux vous aider √† y r√©fl√©chir. Pouvez-vous me donner plus de contexte ou √™tre plus sp√©cifique ?"
        
        # R√©ponse encourageante par d√©faut
        return "Je ne suis pas s√ªr de bien comprendre. Pouvez-vous reformuler ? Je peux vous aider avec l'analyse de documents, la g√©n√©ration de code, ou simplement discuter !"
    
    def _tell_joke(self) -> str:
        """Raconte une blague al√©atoire du stock en √©vitant les r√©p√©titions"""
        if not self.jokes:
            return "D√©sol√©, je n'ai pas de blague en stock pour le moment ! üòÖ"
        
        # Si on a utilis√© la plupart des blagues, on reset
        if len(self.used_jokes) >= len(self.jokes) * self.jokes_reset_threshold:
            self.used_jokes.clear()
            intro_reset = "Bon, j'ai √©puis√© mon stock, je recommence ! üòÑ\n\n"
        else:
            intro_reset = ""
        
        # Trouver les blagues non utilis√©es
        available_jokes = []
        for i, joke in enumerate(self.jokes):
            if i not in self.used_jokes:
                available_jokes.append((i, joke))
        
        # Si plus de blagues disponibles, reset complet
        if not available_jokes:
            self.used_jokes.clear()
            available_jokes = [(i, joke) for i, joke in enumerate(self.jokes)]
            intro_reset = "J'ai fait le tour de mes blagues, je recommence ! üòÑ\n\n"
        
        # S√©lectionner une blague al√©atoire parmi celles disponibles
        joke_index, selected_joke = random.choice(available_jokes)
        
        # Marquer cette blague comme utilis√©e
        self.used_jokes.add(joke_index)
        
        # Phrases d'introduction vari√©es
        introductions = [
            "Voici une petite blague pour vous ! üòÑ",
            "Tiens, j'en ai une bonne ! üòÜ",
            "Allez, une petite blague pour d√©tendre l'atmosph√®re ! üòä",
            "Haha, j'en connais une excellente ! ü§£",
            "Pr√™t pour une blague ? üòÑ",
            "Je vais vous faire sourire ! üòÅ",
            "En voici une qui va vous plaire ! üòâ",
            "Attendez, j'en ai une dr√¥le ! ü§≠"
        ]
        
        # Choisir une introduction diff√©rente si possible
        if hasattr(self, 'last_joke_intro'):
            available_intros = [intro for intro in introductions if intro != self.last_joke_intro]
            if available_intros:
                intro = random.choice(available_intros)
            else:
                intro = random.choice(introductions)
        else:
            intro = random.choice(introductions)
        
        # Sauvegarder l'introduction pour √©viter la r√©p√©tition
        self.last_joke_intro = intro
        
        # Message de statut si on approche de la fin du stock
        status_message = ""
        remaining = len(self.jokes) - len(self.used_jokes)
        if remaining <= 2 and len(self.jokes) > 3:
            status_message = f"\n\nüòÖ Plus que {remaining} blague(s) dans mon stock !"
        
        return f"{intro_reset}{intro}\n\n{selected_joke}{status_message}"
    
    def _handle_internet_search(self, user_input: str, context: Dict[str, Any]) -> str:
        """
        G√®re les demandes de recherche internet
        
        Args:
            user_input: Question de l'utilisateur
            context: Contexte de la conversation
            
        Returns:
            str: R√©sum√© des r√©sultats de recherche
        """
        # Extraire la requ√™te de recherche de l'input utilisateur
        search_query = self._extract_search_query(user_input)
        
        if not search_query:
            return """üîç **Recherche internet**

Je n'ai pas bien compris ce que vous voulez rechercher. 

**Exemples de demandes :**
‚Ä¢ "Cherche sur internet les actualit√©s Python"
‚Ä¢ "Recherche des informations sur l'intelligence artificielle"
‚Ä¢ "Trouve-moi des news sur Tesla"
‚Ä¢ "Peux-tu chercher comment faire du pain ?"

Reformulez votre demande en pr√©cisant ce que vous voulez rechercher."""
        
        # Effectuer la recherche avec le moteur de recherche internet
        try:
            print(f"üåê Lancement de la recherche pour: '{search_query}'")
            search_context = {
                "conversation_context": context,
                "user_language": "fran√ßais",
                "search_type": self._detect_search_type(user_input)
            }
            
            result = self.internet_search.search_and_summarize(search_query, search_context)
            return result
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la recherche internet: {str(e)}")
            return f"""‚ùå **Erreur de recherche**

D√©sol√©, je n'ai pas pu effectuer la recherche pour '{search_query}'.

**Causes possibles :**
‚Ä¢ Pas de connexion internet
‚Ä¢ Probl√®me temporaire avec les moteurs de recherche
‚Ä¢ Requ√™te trop complexe

**Solutions :**
‚Ä¢ V√©rifiez votre connexion internet
‚Ä¢ Reformulez votre demande
‚Ä¢ R√©essayez dans quelques instants

Erreur technique : {str(e)}"""
    
    def _extract_search_query(self, user_input: str) -> str:
        """
        Extrait la requ√™te de recherche de l'input utilisateur
        
        Args:
            user_input: Input de l'utilisateur
            
        Returns:
            str: Requ√™te de recherche extraite
        """
        user_lower = user_input.lower().strip()
        
        # Patterns pour extraire la requ√™te
        patterns = [
            r"(?:cherche|recherche|trouve)\s+(?:sur\s+)?(?:internet|web|google|en ligne)\s+(.+)",
            r"(?:cherche|recherche)\s+(?:moi\s+)?(?:des\s+)?(?:informations?\s+)?(?:sur|√† propos de)\s+(.+)",
            r"cherche[-\s]moi\s+(.+)",
            r"peux[-\s]tu\s+(?:chercher|rechercher|trouver)\s+(.+)",
            r"(?:informations?|info|donn√©es|news|actualit√©s?)\s+(?:sur|√† propos de|concernant)\s+(.+)",
            r"(?:derni√®res?\s+)?(?:actualit√©s?|news|nouvelles?)\s+(?:sur|de|√† propos de)\s+(.+)",
            r"qu[\'']?est[-\s]ce\s+qu[\'']?on\s+dit\s+(?:sur|de)\s+(.+)",
            r"(?:web|internet|google)\s+search\s+(.+)"
        ]
        
        for pattern in patterns:
            match = re.search(pattern, user_lower)
            if match:
                query = match.group(1).strip()
                # Nettoyer la requ√™te
                query = re.sub(r'\s+', ' ', query)  # Normaliser les espaces
                query = query.strip('.,!?;')  # Supprimer la ponctuation finale
                return query
        
        # Fallback: si aucun pattern ne correspond, essayer de deviner
        # Supprimer les mots de commande du d√©but
        for word in ["cherche", "recherche", "trouve", "sur", "internet", "web", "google", "en", "ligne", "moi", "des", "informations"]:
            if user_lower.startswith(word):
                user_lower = user_lower[len(word):].strip()
        
        return user_lower if len(user_lower) > 2 else ""
    
    def _detect_search_type(self, user_input: str) -> str:
        """
        D√©tecte le type de recherche demand√©
        
        Args:
            user_input: Input de l'utilisateur
            
        Returns:
            str: Type de recherche
        """
        user_lower = user_input.lower()
        
        if any(word in user_lower for word in ["actualit√©", "news", "derni√®res nouvelles", "r√©cent"]):
            return "news"
        elif any(word in user_lower for word in ["comment", "how to", "tutorial", "guide", "√©tapes"]):
            return "tutorial"
        elif any(word in user_lower for word in ["qu'est-ce que", "d√©finition", "c'est quoi", "define"]):
            return "definition"
        elif any(word in user_lower for word in ["prix", "co√ªt", "combien", "price"]):
            return "price"
        elif any(word in user_lower for word in ["avis", "opinion", "review", "critique"]):
            return "review"
        else:
            return "general"
    
    def _answer_programming_question(self, user_input: str, context: Dict[str, Any]) -> str:
        """R√©pond aux questions de programmation avec des exemples pratiques"""
        user_lower = user_input.lower()
        
        # D√©tection du type de question et r√©ponse avec exemples
        if any(word in user_lower for word in ["liste", "list"]):
            return self._explain_python_lists()
        elif any(word in user_lower for word in ["dictionnaire", "dict"]):
            return self._explain_python_dictionaries()
        elif any(word in user_lower for word in ["fonction", "def"]):
            return self._explain_python_functions()
        elif any(word in user_lower for word in ["variable"]):
            return self._explain_python_variables()
        elif any(word in user_lower for word in ["boucle", "for", "while"]):
            return self._explain_python_loops()
        elif any(word in user_lower for word in ["condition", "if", "else"]):
            return self._explain_python_conditions()
        elif any(word in user_lower for word in ["classe", "class", "objet"]):
            return self._explain_python_classes()
        else:
            return self._generate_general_programming_help(user_input)
    
    def _explain_python_lists(self) -> str:
        """Explique comment cr√©er et utiliser les listes en Python"""
        return """üêç **Comment cr√©er une liste en Python**

Une liste est une collection ordonn√©e d'√©l√©ments modifiables. Voici comment s'y prendre :

üìù **Cr√©ation d'une liste :**
```python
# Liste vide
ma_liste = []

# Liste avec des √©l√©ments
fruits = ["pomme", "banane", "orange"]
nombres = [1, 2, 3, 4, 5]
mixte = ["texte", 42, True, 3.14]
```

üîß **Op√©rations courantes :**
```python
# Ajouter un √©l√©ment
fruits.append("kiwi")          # ["pomme", "banane", "orange", "kiwi"]

# Ins√©rer √† une position
fruits.insert(1, "fraise")     # ["pomme", "fraise", "banane", "orange", "kiwi"]

# Acc√©der √† un √©l√©ment
premier_fruit = fruits[0]       # "pomme"
dernier_fruit = fruits[-1]      # "kiwi"

# Modifier un √©l√©ment
fruits[0] = "poire"            # ["poire", "fraise", "banane", "orange", "kiwi"]

# Supprimer un √©l√©ment
fruits.remove("fraise")        # ["poire", "banane", "orange", "kiwi"]
del fruits[0]                  # ["banane", "orange", "kiwi"]

# Longueur de la liste
taille = len(fruits)           # 3
```

üí° **Conseils pratiques :**
‚Ä¢ Les listes sont index√©es √† partir de 0
‚Ä¢ Utilisez des indices n√©gatifs pour partir de la fin
‚Ä¢ Les listes peuvent contenir diff√©rents types de donn√©es"""

    def _explain_python_dictionaries(self) -> str:
        """Explique comment cr√©er et utiliser les dictionnaires en Python"""
        return """üêç **Comment cr√©er un dictionnaire en Python**

Un dictionnaire stocke des paires cl√©-valeur. Parfait pour associer des donn√©es !

üìù **Cr√©ation d'un dictionnaire :**
```python
# Dictionnaire vide
mon_dict = {}

# Dictionnaire avec des donn√©es
personne = {
    "nom": "Dupont",
    "age": 30,
    "ville": "Paris"
}

# Autre m√©thode
coords = dict(x=10, y=20, z=5)
```

üîß **Op√©rations courantes :**
```python
# Acc√©der √† une valeur
nom = personne["nom"]           # "Dupont"
age = personne.get("age", 0)    # 30 (ou 0 si pas trouv√©)

# Ajouter/modifier une valeur
personne["email"] = "dupont@example.com"
personne["age"] = 31

# V√©rifier si une cl√© existe
if "nom" in personne:
    print("Nom trouv√© !")

# Supprimer un √©l√©ment
del personne["ville"]
email = personne.pop("email", "")  # R√©cup√®re et supprime

# R√©cup√©rer toutes les cl√©s/valeurs
cles = list(personne.keys())       # ["nom", "age"]
valeurs = list(personne.values())  # ["Dupont", 31]
```

üí° **Conseils pratiques :**
‚Ä¢ Les cl√©s doivent √™tre uniques et immuables
‚Ä¢ Utilisez `get()` pour √©viter les erreurs
‚Ä¢ Parfait pour structurer des donn√©es complexes"""

    def _explain_python_functions(self) -> str:
        """Explique comment cr√©er des fonctions en Python"""
        return """üêç **Comment cr√©er une fonction en Python**

Les fonctions permettent de r√©utiliser du code et d'organiser votre programme.

üìù **Syntaxe de base :**
```python
def nom_fonction(param√®tres):
    \"\"\"Description de la fonction\"\"\"
    # Code de la fonction
    return r√©sultat  # optionnel
```

üîß **Exemples pratiques :**
```python
# Fonction simple
def dire_bonjour():
    print("Bonjour !")

# Fonction avec param√®tres
def saluer(nom, age=25):
    return f"Salut {nom}, tu as {age} ans !"

# Fonction avec calcul
def calculer_aire_rectangle(longueur, largeur):
    \"\"\"Calcule l'aire d'un rectangle\"\"\"
    aire = longueur * largeur
    return aire

# Fonction avec plusieurs retours
def diviser(a, b):
    if b == 0:
        return None, "Division par z√©ro impossible"
    return a / b, "OK"

# Utilisation
dire_bonjour()                          # Affiche: Bonjour !
message = saluer("Alice")               # "Salut Alice, tu as 25 ans !"
message2 = saluer("Bob", 30)            # "Salut Bob, tu as 30 ans !"
aire = calculer_aire_rectangle(5, 3)    # 15
resultat, statut = diviser(10, 2)       # 5.0, "OK"
```

üí° **Bonnes pratiques :**
‚Ä¢ Utilisez des noms descriptifs
‚Ä¢ Ajoutez une docstring pour documenter
‚Ä¢ Une fonction = une responsabilit√©
‚Ä¢ Utilisez des param√®tres par d√©faut quand c'est utile"""

    def _explain_python_variables(self) -> str:
        """Explique comment cr√©er et utiliser les variables en Python"""
        return """üêç **Comment cr√©er des variables en Python**

Les variables stockent des donn√©es que vous pouvez utiliser dans votre programme.

üìù **Cr√©ation de variables :**
```python
# Texte (string)
nom = "Alice"
prenom = 'Bob'
message = \"\"\"Texte
sur plusieurs
lignes\"\"\"

# Nombres
age = 25                    # Entier (int)
taille = 1.75              # D√©cimal (float)
complexe = 3 + 4j          # Nombre complexe

# Bool√©ens
est_majeur = True
est_mineur = False

# Collections
fruits = ["pomme", "banane"]        # Liste
personne = {"nom": "Dupont"}        # Dictionnaire
coordonnees = (10, 20)              # Tuple (immuable)
```

üîß **Op√©rations avec variables :**
```python
# Assignation multiple
x, y, z = 1, 2, 3
nom, age = "Alice", 30

# √âchange de valeurs
a, b = 5, 10
a, b = b, a                # a=10, b=5

# Op√©rations math√©matiques
somme = x + y              # 3
produit = x * z            # 3
puissance = x ** 3         # 1

# Concat√©nation de texte
nom_complet = prenom + " " + nom    # "Bob Alice"
presentation = f"Je suis {nom}, {age} ans"  # f-string

# V√©rification du type
type(age)                  # <class 'int'>
isinstance(taille, float)  # True
```

üí° **R√®gles importantes :**
‚Ä¢ Noms en minuscules avec _ pour s√©parer
‚Ä¢ Pas d'espaces, pas de chiffres au d√©but
‚Ä¢ √âvitez les mots-cl√©s Python (if, for, class...)
‚Ä¢ Soyez descriptifs : `age_utilisateur` plut√¥t que `a`"""

    def _explain_python_loops(self) -> str:
        """Explique les boucles en Python"""
        return """üêç **Comment utiliser les boucles en Python**

Les boucles permettent de r√©p√©ter du code automatiquement.

üìù **Boucle for (pour it√©rer) :**
```python
# Boucle sur une liste
fruits = ["pomme", "banane", "orange"]
for fruit in fruits:
    print(f"J'aime les {fruit}s")

# Boucle avec un range
for i in range(5):          # 0, 1, 2, 3, 4
    print(f"Compteur: {i}")

for i in range(2, 8, 2):    # 2, 4, 6 (d√©but, fin, pas)
    print(f"Nombre pair: {i}")

# Boucle avec index et valeur
for index, fruit in enumerate(fruits):
    print(f"{index}: {fruit}")

# Boucle sur un dictionnaire
personne = {"nom": "Alice", "age": 30}
for cle, valeur in personne.items():
    print(f"{cle}: {valeur}")
```

üîÑ **Boucle while (tant que) :**
```python
# Boucle while classique
compteur = 0
while compteur < 5:
    print(f"Compteur: {compteur}")
    compteur += 1          # Important: incr√©menter !

# Boucle infinie contr√¥l√©e
while True:
    reponse = input("Continuez ? (o/n): ")
    if reponse.lower() == 'n':
        break              # Sort de la boucle
    print("On continue !")
```

üõë **Contr√¥le des boucles :**
```python
# break : sort de la boucle
for i in range(10):
    if i == 5:
        break              # Sort quand i=5
    print(i)               # Affiche 0,1,2,3,4

# continue : passe √† l'it√©ration suivante
for i in range(5):
    if i == 2:
        continue           # Saute i=2
    print(i)               # Affiche 0,1,3,4
```

üí° **Conseils pratiques :**
‚Ä¢ `for` pour un nombre connu d'it√©rations
‚Ä¢ `while` pour des conditions variables
‚Ä¢ Attention aux boucles infinies avec `while`
‚Ä¢ Utilisez `enumerate()` si vous avez besoin de l'index"""

    def _explain_python_conditions(self) -> str:
        """Explique les conditions en Python"""
        return """üêç **Comment utiliser les conditions en Python**

Les conditions permettent d'ex√©cuter du code selon certains crit√®res.

üìù **Structure if/elif/else :**
```python
age = 18

if age >= 18:
    print("Vous √™tes majeur")
elif age >= 16:
    print("Vous pouvez conduire")
elif age >= 13:
    print("Vous √™tes adolescent")
else:
    print("Vous √™tes enfant")
```

üîç **Op√©rateurs de comparaison :**
```python
# √âgalit√© et in√©galit√©
x == y          # √âgal √†
x != y          # Diff√©rent de
x > y           # Sup√©rieur √†
x >= y          # Sup√©rieur ou √©gal
x < y           # Inf√©rieur √†
x <= y          # Inf√©rieur ou √©gal

# Appartenance
"a" in "maison"     # True
"pomme" in fruits   # True si pomme dans la liste

# Identit√©
x is None           # True si x vaut None
x is not None       # True si x ne vaut pas None
```

üîó **Op√©rateurs logiques :**
```python
age = 25
nom = "Alice"

# AND (et) - toutes les conditions doivent √™tre vraies
if age >= 18 and nom == "Alice":
    print("Alice est majeure")

# OR (ou) - au moins une condition doit √™tre vraie
if age < 18 or nom == "Bob":
    print("Mineur ou Bob")

# NOT (non) - inverse la condition
if not (age < 18):
    print("Pas mineur = majeur")
```

üéØ **Conditions avanc√©es :**
```python
# Conditions multiples
note = 85
if 80 <= note <= 100:      # √âquivalent √†: note >= 80 and note <= 100
    print("Excellent !")

# Conditions avec fonctions
def est_pair(nombre):
    return nombre % 2 == 0

if est_pair(4):
    print("4 est pair")

# Op√©rateur ternaire (condition courte)
statut = "majeur" if age >= 18 else "mineur"
resultat = "pair" if x % 2 == 0 else "impair"

# V√©rification d'existence
if fruits:                 # True si la liste n'est pas vide
    print("Il y a des fruits")

if nom:                    # True si nom n'est pas vide
    print(f"Bonjour {nom}")
```

üí° **Bonnes pratiques :**
‚Ä¢ Utilisez des parenth√®ses pour clarifier les conditions complexes
‚Ä¢ Pr√©f√©rez `is` et `is not` pour comparer avec `None`
‚Ä¢ √âvitez les conditions trop imbriqu√©es
‚Ä¢ Pensez aux cas limites (listes vides, valeurs None...)"""

    def _explain_python_classes(self) -> str:
        """Explique les classes en Python"""
        return """üêç **Comment cr√©er des classes en Python**

Les classes permettent de cr√©er vos propres types d'objets avec propri√©t√©s et m√©thodes.

üìù **Syntaxe de base :**
```python
class Personne:
    \"\"\"Classe repr√©sentant une personne\"\"\"
    
    def __init__(self, nom, age):
        \"\"\"Constructeur : appel√© √† la cr√©ation\"\"\"
        self.nom = nom          # Attribut
        self.age = age          # Attribut
        self.email = None       # Attribut optionnel
    
    def se_presenter(self):
        \"\"\"M√©thode pour se pr√©senter\"\"\"
        return f"Je suis {self.nom}, j'ai {self.age} ans"
    
    def avoir_anniversaire(self):
        \"\"\"M√©thode pour vieillir d'un an\"\"\"
        self.age += 1
        print(f"Joyeux anniversaire ! Maintenant {self.age} ans")
```

üèóÔ∏è **Utilisation de la classe :**
```python
# Cr√©er des objets (instances)
alice = Personne("Alice", 25)
bob = Personne("Bob", 30)

# Utiliser les m√©thodes
print(alice.se_presenter())     # "Je suis Alice, j'ai 25 ans"
bob.avoir_anniversaire()        # "Joyeux anniversaire ! Maintenant 31 ans"

# Acc√©der/modifier les attributs
alice.email = "alice@example.com"
print(f"Email: {alice.email}")

# Chaque objet est ind√©pendant
print(f"Alice: {alice.age} ans")    # 25
print(f"Bob: {bob.age} ans")        # 31
```

üîß **Exemple plus complet :**
```python
class CompteBancaire:
    \"\"\"Classe pour g√©rer un compte bancaire\"\"\"
    
    def __init__(self, proprietaire, solde_initial=0):
        self.proprietaire = proprietaire
        self.solde = solde_initial
        self.historique = []
    
    def deposer(self, montant):
        \"\"\"D√©poser de l'argent\"\"\"
        if montant > 0:
            self.solde += montant
            self.historique.append(f"D√©p√¥t: +{montant}‚Ç¨")
            return True
        return False
    
    def retirer(self, montant):
        \"\"\"Retirer de l'argent\"\"\"
        if 0 < montant <= self.solde:
            self.solde -= montant
            self.historique.append(f"Retrait: -{montant}‚Ç¨")
            return True
        return False
    
    def afficher_solde(self):
        \"\"\"Afficher le solde\"\"\"
        return f"Solde de {self.proprietaire}: {self.solde}‚Ç¨"

# Utilisation
compte = CompteBancaire("Alice", 1000)
compte.deposer(500)
compte.retirer(200)
print(compte.afficher_solde())      # "Solde de Alice: 1300‚Ç¨"
```

üí° **Concepts cl√©s :**
‚Ä¢ `__init__` : constructeur appel√© √† la cr√©ation
‚Ä¢ `self` : r√©f√©rence √† l'instance courante
‚Ä¢ Attributs : variables de l'objet
‚Ä¢ M√©thodes : fonctions de l'objet
‚Ä¢ Encapsulation : regrouper donn√©es et comportements"""

    def _generate_general_programming_help(self, user_input: str) -> str:
        """G√©n√®re une aide g√©n√©rale sur la programmation"""
        return """üêç **Aide g√©n√©rale Python**

Je peux vous aider avec de nombreux concepts Python ! Voici quelques exemples :

üìö **Sujets disponibles :**
‚Ä¢ **Listes** : "Comment cr√©er une liste en Python ?"
‚Ä¢ **Dictionnaires** : "Comment utiliser un dictionnaire ?"
‚Ä¢ **Fonctions** : "Comment cr√©er une fonction ?"
‚Ä¢ **Variables** : "Comment d√©clarer une variable ?"
‚Ä¢ **Boucles** : "Comment faire une boucle for ?"
‚Ä¢ **Conditions** : "Comment utiliser if/else ?"
‚Ä¢ **Classes** : "Comment cr√©er une classe ?"

üí° **Exemples de questions :**
‚Ä¢ "Comment cr√©er une liste en Python ?"
‚Ä¢ "Quelle est la diff√©rence entre une liste et un dictionnaire ?"
‚Ä¢ "Comment faire une boucle sur un dictionnaire ?"
‚Ä¢ "Comment cr√©er une fonction avec des param√®tres ?"

üéØ **Soyez sp√©cifique :** Plus votre question est pr√©cise, plus ma r√©ponse sera adapt√©e √† vos besoins !

Que voulez-vous apprendre exactement ?"""
    
    def _get_random_response(self, responses: List[str]) -> str:
        """S√©lectionne une r√©ponse al√©atoire"""
        import random
        return random.choice(responses)
        
    def _generate_document_summary(self, user_input: str) -> str:
        """
        G√©n√®re un r√©sum√© intelligent d'un document (PDF ou DOCX) - Version universelle
        
        Args:
            user_input: La demande de r√©sum√© contenant le texte extrait du document
            
        Returns:
            str: R√©sum√© du contenu du document
        """
        print(f"üîç DEBUG: user_input re√ßu dans _generate_document_summary:")
        print(f"Longueur: {len(user_input)}")
        print(f"Premiers 500 caract√®res: {user_input[:500]}")
        print(f"--- S√âPARATEUR ---")
        
        # Extraction du contenu du document depuis le prompt
        content_start = user_input.find("\n\n")
        if content_start == -1:
            return "Je n'ai pas trouv√© de contenu √† r√©sumer dans votre demande."
        
        document_content = user_input[content_start:].strip()
        if not document_content or len(document_content) < 10:
            return "Je n'ai pas pu extraire suffisamment de texte de ce document pour en faire un r√©sum√©."
        
        # Sauvegarde du contenu dans la m√©moire de conversation pour les futures questions
        is_pdf = "pdf content" in user_input.lower()
        doc_type = "PDF" if is_pdf else "document Word"
        filename = "document"
        
        # Extraction du nom de fichier s'il existe dans la demande
        filename_patterns = [
            r'Please summarize this PDF content from file \'(.+?)\':\n',
            r'Please analyze this document content from file \'(.+?)\':\n',
            r'Processed (?:PDF|DOCX): (.+?)(?:\n|$)',
            r'Fichier (?:PDF|DOCX): (.+?)(?:\n|$)',
            r'Document: (.+?)(?:\n|$)',
            r'PDF: (.+?)(?:\n|$)',
            r'DOCX: (.+?)(?:\n|$)'
        ]
        
        filename = "document"
        for pattern in filename_patterns:
            filename_match = re.search(pattern, user_input, re.IGNORECASE)
            if filename_match:
                filename = filename_match.group(1).strip()
                # Nettoyer le nom de fichier en gardant le nom de base
                filename = filename.replace('.pdf', '').replace('.docx', '').replace('.PDF', '').replace('.DOCX', '')
                break
        
        # Si on n'a toujours pas trouv√©, essayer d'extraire depuis le prompt "please summarize this"
        if filename == "document":
            # Chercher des patterns dans le prompt syst√®me
            system_patterns = [
                r'please summarize this pdf content:\s*(.+?)\.pdf',
                r'please analyze this document content:\s*(.+?)\.docx',
                r'PDF:\s*(.+?)\.pdf',
                r'DOCX:\s*(.+?)\.docx'
            ]
            
            for pattern in system_patterns:
                match = re.search(pattern, user_input, re.IGNORECASE)
                if match:
                    filename = match.group(1).strip()
                    break
        
        # Si toujours pas trouv√©, chercher dans les lignes avec .pdf/.docx
        if filename == "document":
            lines = user_input.split('\n')
            for line in lines[:10]:  # Chercher dans les 10 premi√®res lignes
                if '.pdf' in line.lower() or '.docx' in line.lower():
                    # Extraire le nom de fichier potentiel
                    words = line.split()
                    for word in words:
                        if '.pdf' in word.lower() or '.docx' in word.lower():
                            filename = word.strip(',:()[]').replace('.pdf', '').replace('.docx', '').replace('.PDF', '').replace('.DOCX', '')
                            break
                    if filename != "document":
                        break
        
        print(f"üìÑ Nom de fichier extrait: '{filename}'")
        
        # Stockage du contenu du document dans le contexte de conversation
        self.conversation_memory.store_document_content(filename, document_content)
        
        # Analyse du contenu de mani√®re g√©n√©rique
        return self._create_universal_summary(document_content, filename, doc_type)
    
    def _create_universal_summary(self, content: str, filename: str, doc_type: str) -> str:
        """Cr√©e un r√©sum√© universel et naturel"""
        # Statistiques de base
        word_count = len(content.split())
        char_count = len(content)
        paragraph_count = len([p for p in content.split('\n\n') if p.strip()])
        
        # Extraction des phrases cl√©s
        sentences = [s.strip() for s in re.split(r'[.!?]+', content) if len(s.strip()) > 20]
        
        if "docx" in filename.lower() or doc_type.lower() == "docx":
            doc_type_display = "document Word"
        elif "pdf" in filename.lower() or doc_type.lower() == "pdf":
            doc_type_display = "PDF"
        else:
            doc_type_display = doc_type
        
        # D√©but du r√©sum√©
        summary = f"üìÑ **R√©sum√© du {doc_type_display} '{filename}'**\n\n"
        
        if word_count < 50:
            summary += "‚ö†Ô∏è Ce document contient tr√®s peu de texte.\n\n"
        
        summary += f"üìä **Contenu analys√© :** {word_count} mots, {paragraph_count} paragraphes\n\n"
        
        # Contenu principal
        if sentences:
            summary += "üìù **Contenu principal :**\n"
            if len(sentences) >= 1:
                summary += f"Le document commence par : \"{sentences[0][:150]}{'...' if len(sentences[0]) > 150 else ''}\"\n\n"
            
            if len(sentences) > 1:
                summary += "üîç **Points cl√©s :**\n"
                key_sentences = sentences[1:4]  # 2-4√®me phrases
                for i, sentence in enumerate(key_sentences, 1):
                    if len(sentence) > 200:
                        sentence = sentence[:197] + "..."
                    summary += f"‚Ä¢ {sentence}\n"
                summary += "\n"
        
        # Analyse th√©matique simple
        themes = self._analyze_content_themes(content)
        if themes:
            summary += "üè∑Ô∏è **Th√®mes identifi√©s :** " + ", ".join(themes[:5]) + "\n\n"
        
        # Message de m√©morisation
        summary += "üíæ **Document m√©moris√© :** Vous pouvez maintenant me poser des questions sp√©cifiques sur ce contenu."
        
        return summary

    def _analyze_content_themes(self, content: str) -> List[str]:
        """Analyse simple des th√®mes du contenu"""
        content_lower = content.lower()
        
        # Mots-cl√©s th√©matiques
        theme_keywords = {
            "s√©curit√©": ["s√©curit√©", "securite", "accident", "urgence", "secours"],
            "technique": ["syst√®me", "technique", "proc√©dure", "m√©thode"],
            "entreprise": ["entreprise", "soci√©t√©", "organisation", "√©quipe"],
            "formation": ["formation", "stage", "apprentissage", "cours"],
            "contact": ["contact", "t√©l√©phone", "email", "adresse"],
        }
        
        detected_themes = []
        for theme, keywords in theme_keywords.items():
            if any(keyword in content_lower for keyword in keywords):
                detected_themes.append(theme)
        
        return detected_themes

    def _extract_key_sentences(self, content: str, max_sentences: int = 5) -> List[str]:
        """
        Extrait les phrases cl√©s d'un document de mani√®re universelle
        
        Args:
            content: Contenu du document
            max_sentences: Nombre maximum de phrases √† extraire
            
        Returns:
            Liste des phrases cl√©s
        """
        # Nettoyage et s√©paration en phrases
        content_clean = re.sub(r'\s+', ' ', content.strip())
        
        # S√©paration en phrases (approximative)
        sentences = re.split(r'[.!?]+\s+', content_clean)
        sentences = [s.strip() for s in sentences if len(s.strip()) > 20]  # Phrases significatives
        
        key_sentences = []
        
        # Premi√®re phrase (souvent importante)
        if sentences:
            key_sentences.append(sentences[0][:200] + "..." if len(sentences[0]) > 200 else sentences[0])
        
        # Phrases avec des mots d'importance (mots de transition, etc.)
        importance_words = ['important', 'essentiel', 'principal', 'objectif', 'but', 'conclusion', 
                          'r√©sultat', 'efficace', 'n√©cessaire', 'recommand√©', 'obligatoire']
        
        for sentence in sentences[1:]:
            if any(word in sentence.lower() for word in importance_words):
                if len(key_sentences) < max_sentences:
                    key_sentences.append(sentence[:200] + "..." if len(sentence) > 200 else sentence)
        
        # Si pas assez de phrases "importantes", prendre des phrases du milieu et de la fin
        if len(key_sentences) < max_sentences and len(sentences) > 2:
            # Phrase du milieu
            mid_idx = len(sentences) // 2
            if mid_idx < len(sentences) and len(key_sentences) < max_sentences:
                mid_sentence = sentences[mid_idx]
                if mid_sentence not in key_sentences:
                    key_sentences.append(mid_sentence[:200] + "..." if len(mid_sentence) > 200 else mid_sentence)
            
            # Derni√®re phrase si elle est substantielle
            if len(sentences) > 1 and len(key_sentences) < max_sentences:
                last_sentence = sentences[-1]
                if len(last_sentence) > 30 and last_sentence not in key_sentences:
                    key_sentences.append(last_sentence[:200] + "..." if len(last_sentence) > 200 else last_sentence)
        
        return key_sentences[:max_sentences]
    
    def _detect_document_themes(self, content: str) -> Dict[str, List[str]]:
        """
        D√©tecte les th√®mes principaux d'un document de mani√®re universelle
        
        Args:
            content: Contenu du document
            
        Returns:
            Dictionnaire des th√®mes et leurs mots-cl√©s associ√©s
        """
        text_lower = content.lower()
        
        # Mots vides √©tendus
        stop_words = {
            "le", "la", "les", "un", "une", "des", "et", "ou", "√†", "au", "aux", "ce", "ces", 
            "dans", "en", "par", "pour", "sur", "il", "elle", "ils", "elles", "je", "tu", 
            "nous", "vous", "que", "qui", "dont", "o√π", "quoi", "comment", "pourquoi", "avec", 
            "cette", "comme", "plus", "moins", "sans", "tr√®s", "tout", "tous", "toutes", "bien", 
            "√™tre", "avoir", "faire", "aller", "venir", "voir", "savoir", "pouvoir", "vouloir", 
            "devoir", "falloir", "peut", "peuvent", "doit", "doivent", "sont", "√©tait", "sera", 
            "seront", "√©tait", "√©taient", "sera", "seront", "donc", "mais", "car", "ainsi", 
            "alors", "apr√®s", "avant", "pendant", "depuis", "jusqu", "lors", "tandis"
        }
        
        # Extraction de tous les mots significatifs
        words = re.findall(r'\b\w{4,}\b', text_lower)
        word_freq = {}
        
        for word in words:
            if word not in stop_words and not word.isdigit():
                word_freq[word] = word_freq.get(word, 0) + 1
        
        # Garder seulement les mots qui apparaissent plus d'une fois
        significant_words = {word: freq for word, freq in word_freq.items() if freq > 1}
        
        # Cat√©gorisation th√©matique universelle bas√©e sur les mots-cl√©s
        themes = {
            "technique": [],
            "proc√©dure": [],
            "information": [],
            "gestion": [],
            "g√©n√©ral": []
        }
        
        # Classification des mots par th√®me
        for word, freq in sorted(significant_words.items(), key=lambda x: x[1], reverse=True):
            if word in ['technique', 'technologie', 'syst√®me', 'm√©thode', 'processus', 'd√©veloppement', 'solution']:
                themes["technique"].append(f"{word} ({freq})")
            elif word in ['proc√©dure', '√©tape', 'action', 'mesure', 'protocole', 'instruction', 'consigne']:
                themes["proc√©dure"].append(f"{word} ({freq})")
            elif word in ['information', 'donn√©es', 'r√©sultat', 'analyse', 'rapport', 'document', 'fichier']:
                themes["information"].append(f"{word} ({freq})")
            elif word in ['gestion', 'organisation', 'responsable', '√©quipe', 'groupe', 'personnel', 'service']:
                themes["gestion"].append(f"{word} ({freq})")
            else:
                # Mots les plus fr√©quents qui ne rentrent pas dans les cat√©gories sp√©cifiques
                if len(themes["g√©n√©ral"]) < 10:  # Limiter √† 10 mots g√©n√©raux
                    themes["g√©n√©ral"].append(f"{word} ({freq})")
        
        # Supprimer les th√®mes vides
        themes = {k: v for k, v in themes.items() if v}
        
        return themes
    
    def _analyze_document_structure(self, content: str) -> Dict[str, Any]:
        """
        Analyse la structure d'un document de mani√®re universelle
        
        Args:
            content: Contenu du document
            
        Returns:
            Informations sur la structure du document
        """
        structure = {}
        
        # D√©tection de sections/titres (lignes courtes en majuscules ou avec caract√®res sp√©ciaux)
        lines = content.split('\n')
        potential_sections = []
        
        for line in lines:
            line_clean = line.strip()
            if line_clean:
                # Lignes courtes qui pourraient √™tre des titres
                if len(line_clean) < 80 and (
                    line_clean.isupper() or  # Tout en majuscules
                    re.match(r'^[A-Z][^.]*$', line_clean) or  # Commence par majuscule, pas de point final
                    re.match(r'^\d+\.?\s+[A-Z]', line_clean)  # Commence par un num√©ro
                ):
                    potential_sections.append(line_clean)
        
        if potential_sections:
            structure['sections'] = potential_sections[:10]  # Max 10 sections
        
        # D√©tection de listes ou √©num√©rations
        list_indicators = len(re.findall(r'^\s*[-‚Ä¢*]\s+', content, re.MULTILINE))
        numbered_lists = len(re.findall(r'^\s*\d+\.?\s+', content, re.MULTILINE))
        
        structure['lists'] = list_indicators + numbered_lists
        
        # D√©tection de donn√©es num√©riques
        numbers = re.findall(r'\b\d+(?:[.,]\d+)?\b', content)
        if len(numbers) > 5:  # Document avec beaucoup de chiffres
            structure['numbers'] = True
        
        return structure
        
    def _find_keyword_context(self, text: str, keyword: str, context_length: int = 30) -> List[str]:
        """
        Trouve les contextes d'utilisation d'un mot-cl√© dans le texte
        
        Args:
            text: Texte complet
            keyword: Mot-cl√© √† rechercher
            context_length: Nombre de caract√®res de contexte √† extraire
            
        Returns:
            Liste des contextes trouv√©s (maximum 3)
        """
        contexts = []
        text_lower = text.lower()
        keyword_lower = keyword.lower()
        
        # Rechercher jusqu'√† 3 occurrences du mot-cl√©
        start_pos = 0
        for _ in range(3):
            pos = text_lower.find(keyword_lower, start_pos)
            if pos == -1:
                break
                
            # Extraire le contexte
            context_start = max(0, pos - context_length)
            context_end = min(len(text), pos + len(keyword) + context_length)
            context = text[context_start:context_end].replace('\n', ' ').strip()
            
            # Ajouter des ... si le contexte est tronqu√©
            if context_start > 0:
                context = "..." + context
            if context_end < len(text):
                context = context + "..."
                
            contexts.append(context)
            start_pos = pos + len(keyword)
            
        return contexts
    
    def _is_document_question(self, user_input: str) -> bool:
        """
        D√©termine si une question concerne un document stock√©
        """
        # Mots-cl√©s qui indiquent une question sur l'identit√© ou les capacit√©s (PAS sur un document)
        identity_keywords = ["qui es-tu", "qui es tu", "qui √™tes vous", "comment tu t'appelles", "ton nom", "tu es qui", "tu es quoi"]
        capability_keywords = ["que peux tu", "que sais tu", "tes capacit√©s", "tu peux faire", "que fais-tu"]
        
        # Si la question contient un mot-cl√© d'identit√© ou de capacit√©, ce n'est pas une question sur un document
        user_lower = user_input.lower()
        if any(keyword in user_lower for keyword in identity_keywords + capability_keywords):
            return False
            
        # Mots-cl√©s qui indiquent clairement une question sur un document
        document_keywords = [
            # R√©sum√©s et analyses sp√©cifiques
            "r√©sume le pdf", "r√©sume le doc", "r√©sume le document", "r√©sume le fichier",
            "analyse le pdf", "analyse le doc", "analyse le document", "analyse le fichier",
            
            # R√©f√©rences explicites
            "ce pdf", "ce document", "ce fichier", "ce docx", "ce doc", "cette page",
            "le pdf", "le document", "le fichier", "le docx", "le doc",
            "du pdf", "du document", "du fichier", "du docx", "du doc",
            
            # Questions sp√©cifiques avec contexte
            "que dit le pdf", "que dit le document", "que contient le pdf", "que contient le document",
            "dans le pdf", "dans le document", "dans le fichier",
            
            # R√©sum√©s simples avec contexte documentaire r√©cent
            "r√©sume", "resume", "r√©sum√©" if any("pdf" in str(doc).lower() or "docx" in str(doc).lower() 
                                                 for doc in self.conversation_memory.get_document_content().values()) else ""
        ]
        
        # Filtrer les cha√Ænes vides
        document_keywords = [kw for kw in document_keywords if kw]
        
        # Si il y a des documents stock√©s ET la question contient des mots-cl√©s de document sp√©cifiques
        if self.conversation_memory.get_document_content():
            if any(keyword in user_lower for keyword in document_keywords):
                return True
        
        return False
    
    def _answer_code_question(self, user_input: str, code_docs: Dict[str, Any]) -> str:
        """R√©pond aux questions sur le code de mani√®re naturelle"""
        if not code_docs:
            return "Je n'ai pas de code en m√©moire pour r√©pondre √† votre question."
        
        # Prendre le dernier fichier de code
        if self.conversation_memory.document_order:
            last_doc = None
            for doc_name in reversed(self.conversation_memory.document_order):
                if doc_name in code_docs:
                    last_doc = doc_name
                    break
            
            if last_doc:
                doc_data = code_docs[last_doc]
                code_content = doc_data.get("content", "")
                language = doc_data.get("language", "Python")
                
                user_lower = user_input.lower()
                
                if any(word in user_lower for word in ["explique", "que fait", "comment"]):
                    return self._explain_code_naturally(code_content, last_doc, language)
                elif any(word in user_lower for word in ["am√©liore", "optimise"]):
                    return self._suggest_improvements_naturally(code_content, last_doc)
                else:
                    return f"J'ai le code de '{last_doc}' en m√©moire. Que voulez-vous savoir ? Je peux l'expliquer, sugg√©rer des am√©liorations, ou r√©pondre √† des questions sp√©cifiques."
        
        return "J'ai du code en m√©moire mais je ne sais pas lequel vous int√©resse. Pr√©cisez votre question !"
    
    def _explain_code_naturally(self, code: str, filename: str, language: str) -> str:
        """Explique le code de mani√®re naturelle et accessible"""
        lines = code.split('\n')
        
        # Analyse basique
        functions = []
        classes = []
        imports = []
        
        for i, line in enumerate(lines, 1):
            line_stripped = line.strip()
            if line_stripped.startswith('def '):
                func_name = line_stripped.split('(')[0].replace('def ', '')
                functions.append(f"'{func_name}()' (ligne {i})")
            elif line_stripped.startswith('class '):
                class_name = line_stripped.split(':')[0].replace('class ', '').split('(')[0]
                classes.append(f"'{class_name}' (ligne {i})")
            elif line_stripped.startswith(('import ', 'from ')):
                imports.append(line_stripped)
        
        response = f"üìÑ **Explication du code '{filename}'**\n\n"
        
        # Structure g√©n√©rale
        response += f"Ce fichier {language} fait {len(lines)} lignes. Voici ce qu'il contient :\n\n"
        
        if imports:
            response += f"üì¶ **Modules utilis√©s :** {len(imports)} imports\n"
            for imp in imports[:3]:  # Montrer les 3 premiers
                response += f"‚Ä¢ {imp}\n"
            if len(imports) > 3:
                response += f"‚Ä¢ ... et {len(imports)-3} autres\n"
            response += "\n"
        
        if classes:
            response += f"üèóÔ∏è **Classes d√©finies :** {len(classes)}\n"
            for cls in classes:
                response += f"‚Ä¢ Classe {cls}\n"
            response += "\n"
        
        if functions:
            response += f"‚öôÔ∏è **Fonctions principales :** {len(functions)}\n"
            for func in functions[:5]:  # Montrer les 5 premi√®res
                response += f"‚Ä¢ Fonction {func}\n"
            if len(functions) > 5:
                response += f"‚Ä¢ ... et {len(functions)-5} autres\n"
            response += "\n"
        
        # Analyse du contenu
        if "tkinter" in code.lower():
            response += "üñ•Ô∏è **Type :** Interface graphique (Tkinter)\n"
        elif "flask" in code.lower() or "django" in code.lower():
            response += "üåê **Type :** Application web\n"
        elif "class" in code and "def __init__" in code:
            response += "üèõÔ∏è **Style :** Programmation orient√©e objet\n"
        
        response += "\nüí¨ **Questions :** N'h√©sitez pas √† me demander des d√©tails sur une fonction sp√©cifique ou la logique g√©n√©rale !"
        
        return response

    def _suggest_improvements_naturally(self, code: str, filename: str) -> str:
        """Sugg√®re des am√©liorations de mani√®re naturelle"""
        suggestions = []
        
        # Analyse simple du code
        if '"""' not in code and "'''" not in code:
            suggestions.append("üìù **Documentation :** Ajouter des docstrings aux fonctions pour expliquer leur r√¥le")
        
        if 'import *' in code:
            suggestions.append("üì¶ **Imports :** √âviter `import *`, pr√©f√©rer des imports sp√©cifiques")
        
        if not any(line.strip().startswith('#') for line in code.split('\n')):
            suggestions.append("üí¨ **Commentaires :** Ajouter des commentaires pour expliquer la logique")
        
        if 'except:' in code:
            suggestions.append("‚ö†Ô∏è **Gestion d'erreurs :** Sp√©cifier les types d'exceptions plut√¥t que `except:` g√©n√©rique")
        
        response = f"üîß **Suggestions d'am√©lioration pour '{filename}'**\n\n"
        
        if suggestions:
            for i, suggestion in enumerate(suggestions, 1):
                response += f"{i}. {suggestion}\n"
        else:
            response += "‚úÖ **Excellent code !** Voici quelques id√©es g√©n√©rales :\n"
            response += "1. üß™ Ajouter des tests unitaires\n"
            response += "2. üìä Consid√©rer l'ajout de logs pour le debug\n"
            response += "3. üéØ V√©rifier la conformit√© aux standards Python (PEP 8)\n"
        
        response += "\nüí° **Besoin d'aide ?** Demandez-moi de vous montrer comment impl√©menter ces am√©liorations !"
        
        return response
        
    def _explain_code_functionality(self, user_input: str, stored_docs: Dict[str, Any]) -> str:
        """Explique le fonctionnement du code"""
        
        # Prendre le dernier fichier de code ajout√©
        if self.conversation_memory.document_order:
            last_doc = self.conversation_memory.document_order[-1]
            if last_doc in stored_docs:
                doc_data = stored_docs[last_doc]
                if doc_data.get("type") == "code":
                    code_content = doc_data["content"]
                    language = doc_data.get("language", "unknown")
                    
                    if language == "python":
                        return self._explain_python_code(code_content, last_doc)
                    else:
                        return self._explain_generic_code(code_content, last_doc, language)
        
        return "Je n'ai pas de fichier de code r√©cent √† expliquer."

    def _explain_python_code(self, code: str, filename: str) -> str:
        """Explique sp√©cifiquement du code Python"""
        
        analysis = {
            "imports": [],
            "functions": [],
            "classes": [],
            "main_logic": [],
            "key_variables": []
        }
        
        lines = code.split('\n')
        
        for i, line in enumerate(lines, 1):
            line_stripped = line.strip()
            
            # Imports
            if line_stripped.startswith(('import ', 'from ')):
                analysis["imports"].append(f"Ligne {i}: {line_stripped}")
            
            # Fonctions
            elif line_stripped.startswith('def '):
                func_name = line_stripped.split('(')[0].replace('def ', '')
                analysis["functions"].append(f"Ligne {i}: Fonction '{func_name}()'")
            
            # Classes
            elif line_stripped.startswith('class '):
                class_name = line_stripped.split(':')[0].replace('class ', '').split('(')[0]
                analysis["classes"].append(f"Ligne {i}: Classe '{class_name}'")
            
            # Variables importantes (= en d√©but de ligne)
            elif line_stripped and not line_stripped.startswith((' ', '\t', '#')) and '=' in line_stripped:
                var_part = line_stripped.split('=')[0].strip()
                analysis["key_variables"].append(f"Ligne {i}: Variable '{var_part}'")
        
        # Construire une r√©ponse claire
        response = f"üìÑ **Analyse du code Python '{filename}'**\n\n"
        
        # Structure g√©n√©rale
        response += "üìä **Structure du fichier :**\n"
        response += f"‚Ä¢ {len(lines)} lignes de code\n"
        response += f"‚Ä¢ {len(analysis['imports'])} imports\n"
        response += f"‚Ä¢ {len(analysis['classes'])} classes\n"
        response += f"‚Ä¢ {len(analysis['functions'])} fonctions\n\n"
        
        # Imports principaux
        if analysis["imports"]:
            response += "üì¶ **Modules import√©s :**\n"
            for imp in analysis["imports"][:5]:
                module_name = imp.split(': ')[1] if ': ' in imp else imp
                response += f"‚Ä¢ {module_name}\n"
            response += "\n"
        
        # Classes principales
        if analysis["classes"]:
            response += "üèóÔ∏è **Classes d√©finies :**\n"
            for cls in analysis["classes"][:3]:
                response += f"‚Ä¢ {cls.split(': ')[1]}\n"
            response += "\n"
        
        # Fonctions principales
        if analysis["functions"]:
            response += "‚öôÔ∏è **Fonctions principales :**\n"
            for func in analysis["functions"][:5]:
                response += f"‚Ä¢ {func.split(': ')[1]}\n"
            response += "\n"
        
        # Variables cl√©s
        if analysis["key_variables"]:
            response += "üîß **Variables importantes :**\n"
            for var in analysis["key_variables"][:3]:
                response += f"‚Ä¢ {var.split(': ')[1]}\n"
            response += "\n"
        
        # Analyse du contenu
        if "tkinter" in code.lower() or "tk." in code:
            response += "üñ•Ô∏è **Type d'application :** Interface graphique (Tkinter)\n\n"
        elif "flask" in code.lower() or "django" in code.lower():
            response += "üåê **Type d'application :** Application web\n\n"
        elif "class" in code and "def __init__" in code:
            response += "üèõÔ∏è **Paradigme :** Programmation orient√©e objet\n\n"
        
        response += "üí° **Pour aller plus loin :**\n"
        response += "‚Ä¢ Demandez-moi d'expliquer une fonction sp√©cifique\n"
        response += "‚Ä¢ Posez des questions sur la logique\n"
        response += "‚Ä¢ Demandez des suggestions d'am√©lioration\n"
        response += "‚Ä¢ Demandez-moi de modifier une partie du code"
        
        return response
    
    def _suggest_code_improvements(self, user_input: str, stored_docs: Dict[str, Any]) -> str:
        """Sugg√®re des am√©liorations pour le code"""
        
        last_doc = self.conversation_memory.document_order[-1] if self.conversation_memory.document_order else None
        if not last_doc or last_doc not in stored_docs:
            return "Je n'ai pas de code √† analyser pour sugg√©rer des am√©liorations."
        
        doc_data = stored_docs[last_doc]
        code_content = doc_data["content"]
        language = doc_data.get("language", "unknown")
        
        suggestions = []
        
        if language == "python":
            lines = code_content.split('\n')
            
            # V√©rifier les docstrings
            has_docstrings = '"""' in code_content or "'''" in code_content
            if not has_docstrings:
                suggestions.append("üìù **Documentation :** Ajouter des docstrings aux fonctions et classes pour expliquer leur r√¥le")
            
            # V√©rifier les imports
            if 'import *' in code_content:
                suggestions.append("üì¶ **Imports :** √âviter `import *`, pr√©f√©rer des imports sp√©cifiques pour plus de clart√©")
            
            # V√©rifier la longueur des lignes
            long_lines = [i+1 for i, line in enumerate(lines) if len(line) > 100]
            if long_lines:
                suggestions.append(f"üìè **Lisibilit√© :** Raccourcir les lignes trop longues (ex: lignes {long_lines[:3]})")
            
            # V√©rifier les noms de variables courtes
            short_vars = []
            for line in lines:
                if '=' in line and not line.strip().startswith('#'):
                    var_part = line.split('=')[0].strip()
                    if len(var_part) <= 2 and var_part.isalpha() and var_part not in ['x', 'y', 'i', 'j']:
                        short_vars.append(var_part)
            
            if short_vars:
                suggestions.append(f"üè∑Ô∏è **Nommage :** Utiliser des noms plus descriptifs pour : {', '.join(set(short_vars[:3]))}")
            
            # V√©rifier la gestion d'erreurs
            if 'try:' in code_content and 'except:' in code_content:
                suggestions.append("‚ö†Ô∏è **Gestion d'erreurs :** Sp√©cifier les types d'exceptions plut√¥t que `except:` g√©n√©rique")
            
            # V√©rifier les commentaires
            comment_ratio = len([l for l in lines if l.strip().startswith('#')]) / max(len(lines), 1)
            if comment_ratio < 0.1:
                suggestions.append("üí¨ **Commentaires :** Ajouter plus de commentaires pour expliquer la logique complexe")
        
        if not suggestions:
            suggestions = [
                "‚úÖ **Excellent code !** Voici quelques id√©es d'am√©lioration g√©n√©rale :",
                "‚Ä¢ Ajouter des tests unitaires pour v√©rifier le bon fonctionnement",
                "‚Ä¢ Consid√©rer l'ajout de logs pour faciliter le debug",
                "‚Ä¢ V√©rifier la conformit√© aux standards du langage (PEP 8 pour Python)"
            ]
        
        response = f"üîß **Suggestions d'am√©lioration pour '{last_doc}'**\n\n"
        for i, suggestion in enumerate(suggestions, 1):
            response += f"{i}. {suggestion}\n"
        
        response += "\nüí° **Besoin d'aide pour impl√©menter ces am√©liorations ?**\n"
        response += "Demandez-moi de vous montrer comment appliquer ces suggestions concr√®tement !"
        
        return response
    
    def _suggest_code_modifications(self, user_input: str, stored_docs: Dict[str, Any]) -> str:
        """Sugg√®re des modifications sp√©cifiques du code"""
        return "üî® **Modifications de code**\n\nDites-moi exactement ce que vous voulez modifier et je vous proposerai le code modifi√© !"

    def _analyze_code_issues(self, user_input: str, stored_docs: Dict[str, Any]) -> str:
        """Analyse les probl√®mes potentiels dans le code"""
        return "üêõ **Analyse des probl√®mes**\n\nD√©crivez-moi le probl√®me que vous rencontrez et je vous aiderai √† le r√©soudre !"

    def _general_code_analysis(self, user_input: str, stored_docs: Dict[str, Any]) -> str:
        """Analyse g√©n√©rale du code"""
        return self._explain_code_functionality(user_input, stored_docs)

    def _answer_document_question(self, user_input: str, stored_docs: Dict[str, Any]) -> str:
        """R√©pond aux questions sur les documents avec gestion am√©lior√©e"""
        if not stored_docs:
            return "Je n'ai pas de documents en m√©moire pour r√©pondre √† votre question."
        
        user_lower = user_input.lower().strip()
        
        # Gestion des demandes de r√©sum√© avec s√©lection de document
        resume_keywords = ["r√©sume", "resume", "r√©sum√©"]
        
        if any(keyword in user_lower for keyword in resume_keywords):
            
            # Gestion sp√©cifique selon le type de document demand√©
            if "pdf" in user_lower:
                # L'utilisateur demande sp√©cifiquement le PDF
                pdf_docs = {name: doc for name, doc in stored_docs.items() 
                        if any(word in name.lower() for word in ["pdf", "livret", "cauquillous"])}
                
                if pdf_docs:
                    doc_name = list(pdf_docs.keys())[0]
                    doc_data = pdf_docs[doc_name]
                    content = doc_data.get("content", "")
                    return self._create_universal_summary(content, doc_name, "PDF")
                else:
                    return "Je n'ai pas de document PDF en m√©moire."
            
            elif any(word in user_lower for word in ["doc", "docx", "word"]):
                # L'utilisateur demande sp√©cifiquement le document Word
                docx_docs = {name: doc for name, doc in stored_docs.items() 
                            if any(word in name.lower() for word in ["notes", "stage", "docx"])}
                
                if docx_docs:
                    doc_name = list(docx_docs.keys())[0]
                    doc_data = docx_docs[doc_name]
                    content = doc_data.get("content", "")
                    return self._create_universal_summary(content, doc_name, "document Word")
                else:
                    return "Je n'ai pas de document Word en m√©moire."
            
            else:
                # R√©sum√© g√©n√©rique - prendre le dernier document ajout√©
                if self.conversation_memory.document_order:
                    last_doc = self.conversation_memory.document_order[-1]
                    if last_doc in stored_docs:
                        doc_data = stored_docs[last_doc]
                        content = doc_data.get("content", "")
                        
                        # D√©terminer le type correct
                        if any(word in last_doc.lower() for word in ["pdf", "livret"]):
                            doc_type = "PDF"
                        elif any(word in last_doc.lower() for word in ["notes", "stage", "docx"]):
                            doc_type = "document Word"
                        else:
                            doc_type = "document"
                        
                        return self._create_universal_summary(content, last_doc, doc_type)
        
        # Autres questions sp√©cifiques
        return f"J'ai {len(stored_docs)} document(s) en m√©moire : {', '.join(stored_docs.keys())}. Que voulez-vous savoir pr√©cis√©ment ?"

    def _process_document_question(self, user_input: str, target_docs: Dict[str, Any], reference_detected: bool) -> str:
        """
        Traite les questions sur les documents PDF/DOCX
        """
        user_lower = user_input.lower()
        
        # Si c'est une demande de r√©sum√© simple
        if any(keyword in user_lower for keyword in ["r√©sume", "resume", "r√©sum√©", "summary", "sommaire"]):
            if len(target_docs) == 1:
                doc_name = list(target_docs.keys())[0]
                doc_content = target_docs[doc_name]["content"]
                
                # D√©terminer le type de document
                if any(ext in doc_name.lower() for ext in ["pdf", "livret"]):
                    doc_type = "PDF"
                elif any(ext in doc_name.lower() for ext in ["docx", "doc", "notes"]):
                    doc_type = "document Word"
                else:
                    doc_type = "document"
                
                return self._create_universal_summary(doc_content, doc_name, doc_type)
            else:
                # Plusieurs documents, faire un r√©sum√© pour chacun
                summaries = []
                for doc_name, doc_data in target_docs.items():
                    doc_content = doc_data["content"]
                    doc_type = "PDF" if "pdf" in doc_name.lower() else "document Word"
                    summaries.append(self._create_universal_summary(doc_content, doc_name, doc_type))
                return "\n\n".join(summaries)
        
        # Pour les autres questions, utiliser la logique existante de recherche
        question_keywords = self._extract_question_keywords(user_input)
        
        # Recherche dans les documents cibl√©s
        best_matches = []
        
        for filename, doc_data in target_docs.items():
            content = doc_data["content"]
            matches = self._find_relevant_passages(content, question_keywords, user_input)
            
            if matches:
                best_matches.extend([{
                    "filename": filename,
                    "passage": match["passage"],
                    "context": match["context"],
                    "relevance": match["relevance"]
                } for match in matches])
        
        if not best_matches:
            # Recherche plus large si aucune correspondance exacte
            return self._generate_general_document_response(user_input, target_docs)
        
        # Trier par pertinence et prendre les meilleurs r√©sultats
        best_matches.sort(key=lambda x: x["relevance"], reverse=True)
        top_matches = best_matches[:3]
        
        # Construire la r√©ponse
        response_parts = []
        
        if len(target_docs) == 1:
            doc_name = list(target_docs.keys())[0]
            if reference_detected:
                doc_position = self._get_document_position_description(doc_name)
                response_parts.append(f"D'apr√®s le {doc_position} document \"{doc_name}\" :")
            else:
                response_parts.append(f"D'apr√®s le document \"{doc_name}\" :")
        else:
            response_parts.append("D'apr√®s les documents que j'ai analys√©s :")
        
        for i, match in enumerate(top_matches, 1):
            passage = match["passage"]
            if len(passage) > 300:
                passage = passage[:297] + "..."
            
            if len(target_docs) > 1:
                response_parts.append(f"\n{i}. **Dans {match['filename']}** :")
                response_parts.append(f"   \"{passage}\"")
            else:
                response_parts.append(f"\n‚Ä¢ {passage}")
            
            if match["context"]:
                context = match["context"]
                if len(context) > 200:
                    context = context[:197] + "..."
                response_parts.append(f"   Contexte : {context}")
        
        # Ajouter une phrase de conclusion
        if len(top_matches) > 1:
            response_parts.append(f"\nJ'ai trouv√© {len(best_matches)} r√©f√©rences pertinentes dans le(s) document(s). Voulez-vous que je d√©taille un point particulier ?")
        else:
            response_parts.append(f"\nC'est ce que j'ai trouv√© de plus pertinent. Avez-vous besoin de plus de d√©tails ?")
        
        return "\n".join(response_parts)
    
    def _extract_question_keywords(self, question: str) -> List[str]:
        """
        Extrait les mots-cl√©s importants d'une question avec tol√©rance aux fautes
        
        Args:
            question: Question pos√©e
            
        Returns:
            Liste des mots-cl√©s
        """
        # Mots vides √† ignorer
        stop_words = {
            "le", "la", "les", "un", "une", "des", "et", "ou", "√†", "au", "aux", 
            "ce", "ces", "dans", "en", "par", "pour", "sur", "il", "elle", "ils", 
            "elles", "je", "tu", "nous", "vous", "que", "qui", "dont", "o√π", 
            "quoi", "comment", "pourquoi", "avec", "cette", "comme", "plus", 
            "moins", "sans", "tr√®s", "tout", "tous", "toutes", "bien", "√™tre", 
            "avoir", "faire", "aller", "venir", "voir", "savoir", "pouvoir", 
            "vouloir", "devoir", "peut", "peuvent", "doit", "doivent", "que", 
            "dit", "peux", "explique", "moi", "document", "pdf", "fichier"
        }
        
        # Extraire les mots de 2+ caract√®res (abaiss√© pour capturer "no", "n¬∞")
        words = re.findall(r'\b\w{2,}\b', question.lower())
        keywords = [word for word in words if word not in stop_words]
        
        # Ajouter des variantes pour les fautes communes et les synonymes
        expanded_keywords = []
        for keyword in keywords:
            expanded_keywords.append(keyword)
            
            # Corrections communes de fautes d'orthographe et synonymes - TR√àS √âTENDU
            corrections = {
                # Urgence et variations
                "urgence": ["urgance", "urgense", "urgent", "urgents", "emergency", "emergancy", "emerjency"],
                "urgent": ["urgence", "urgance", "urgense", "urgents", "emergency"],
                
                # Num√©ros et variations
                "num√©ro": ["numero", "numeros", "numerot", "n¬∞", "no", "nr", "num", "number", "tel", "telephone", "t√©l"],
                "numero": ["num√©ro", "numeros", "numerot", "n¬∞", "no", "nr", "num", "number"],
                "number": ["num√©ro", "numero", "n¬∞", "no", "nr", "num"],
                
                # S√©curit√© et variations
                "s√©curit√©": ["securite", "securit√©", "secorite", "security", "safety", "saftey"],
                "securite": ["s√©curit√©", "securit√©", "secorite", "security", "safety"],
                "security": ["s√©curit√©", "securite", "safety", "secorite"],
                
                # D√©fibrillateur et variations
                "d√©fibrillateur": ["defibrillateur", "defibrillateur", "d√©fibrillateur", "defibrillator", "defibrulator"],
                "defibrillateur": ["d√©fibrillateur", "defibrillateur", "d√©fibrillateur", "defibrillator"],
                "defibrillator": ["d√©fibrillateur", "defibrillateur", "defibrillateur", "d√©fibrillateur"],
                
                # Extincteur et variations
                "extincteur": ["extincteurs", "estincteur", "fire", "extinguisher", "extinquisher"],
                "extinguisher": ["extincteur", "extincteurs", "estincteur", "extinquisher"],
                
                # Secours et variations
                "secours": ["secour", "secoure", "secours", "help", "aide", "assistance", "emergency", "urgence"],
                "help": ["secours", "aide", "assistance", "secour", "secoure"],
                "aide": ["secours", "help", "assistance", "secour", "secoure"],
                
                # T√©l√©phone et variations
                "t√©l√©phone": ["telephone", "telefone", "phone", "tel", "appel", "t√©l", "telephon"],
                "telephone": ["t√©l√©phone", "telefone", "phone", "tel", "appel", "t√©l"],
                "phone": ["t√©l√©phone", "telephone", "telefone", "tel", "appel"],
                "tel": ["t√©l√©phone", "telephone", "phone", "telefone", "appel", "t√©l"],
                
                # Poste et variations
                "poste": ["post", "postes", "extension", "ext", "poste"],
                "extension": ["poste", "post", "ext", "postes"],
                "ext": ["extension", "poste", "post", "postes"],
                
                # Travail et variations
                "travail": ["travaille", "travai", "work", "job", "bureau", "office", "boulot"],
                "work": ["travail", "travaille", "job", "bureau", "boulot"],
                "bureau": ["office", "travail", "work", "job"],
                
                # Contact et variations
                "contact": ["contacter", "appeler", "joindre", "call", "telephoner", "t√©l√©phoner", "contacte"],
                "contacter": ["contact", "appeler", "joindre", "call", "telephoner"],
                "appeler": ["contact", "contacter", "joindre", "call", "telephoner"],
                "call": ["contact", "contacter", "appeler", "joindre"],
                
                # Accident et variations
                "accident": ["incidents", "incident", "blessure", "injury", "emergency", "bless√©", "blesser"],
                "incident": ["accident", "incidents", "blessure", "injury", "emergency"],
                "blessure": ["accident", "incident", "injury", "bless√©", "blesser"],
                "injury": ["accident", "incident", "blessure", "bless√©"],
                
                # √âvacuation et variations
                "√©vacuation": ["evacuation", "sortie", "exit", "evacuer", "√©vacuer", "evacuate"],
                "evacuation": ["√©vacuation", "sortie", "exit", "evacuer", "√©vacuer"],
                "sortie": ["√©vacuation", "evacuation", "exit", "evacuer"],
                "exit": ["√©vacuation", "evacuation", "sortie", "evacuer"],
                
                # Alerte et variations
                "alerte": ["alarme", "alert", "warning", "signal", "sonnette", "alarme"],
                "alarme": ["alerte", "alert", "warning", "signal", "sonnette"],
                "alert": ["alerte", "alarme", "warning", "signal"],
                "warning": ["alerte", "alarme", "alert", "signal"],
                
                # Responsable et variations
                "responsable": ["chef", "manager", "supervisor", "directeur", "direction", "dirigeant", "boss"],
                "chef": ["responsable", "manager", "supervisor", "directeur", "boss"],
                "manager": ["responsable", "chef", "supervisor", "directeur", "boss"],
                "directeur": ["responsable", "chef", "manager", "supervisor", "direction"],
                
                # Proc√©dure et variations
                "proc√©dure": ["procedure", "protocol", "protocole", "consigne", "instruction", "procedur"],
                "procedure": ["proc√©dure", "protocol", "protocole", "consigne", "instruction"],
                "protocol": ["proc√©dure", "procedure", "protocole", "consigne"],
                "protocole": ["proc√©dure", "procedure", "protocol", "consigne"],
                "consigne": ["proc√©dure", "procedure", "instruction", "protocol"],
                "instruction": ["proc√©dure", "procedure", "consigne", "protocol"],
                
                # Services d'urgence
                "samu": ["15", "ambulance", "medical", "emergency", "urgence", "medecin"],
                "pompiers": ["18", "fire", "brigade", "sapeurs", "firefighter"],
                "police": ["17", "gendarmerie", "authorities", "gendarme", "policier"],
                "ambulance": ["samu", "15", "medical", "emergency", "urgence"],
                
                # Mots interrogatifs avec fautes
                "o√π": ["ou", "where", "endroit", "lieu", "place", "location"],
                "ou": ["o√π", "where", "endroit", "lieu", "place"],
                "comment": ["how", "procedure", "faire", "agir", "r√©agir"],
                "que": ["what", "quoi", "chose", "thing"],
                "qui": ["who", "personne", "person", "gens"],
                "quand": ["when", "moment", "temps", "heure"],
                "pourquoi": ["why", "reason", "raison"],
                "combien": ["how much", "how many", "nombre", "quantit√©"],
                
                # Lieux et √©quipements
                "trouve": ["trouver", "located", "situ√©", "position"],
                "trouver": ["trouve", "located", "situ√©", "chercher"],
                "located": ["trouve", "trouver", "situ√©", "position"],
                "situ√©": ["trouve", "trouver", "located", "position"],
                
                # Actions
                "faire": ["do", "agir", "r√©agir", "action"],
                "agir": ["faire", "do", "r√©agir", "action", "react"],
                "r√©agir": ["faire", "agir", "do", "react", "reaction"]
            }
            
            # Ajouter les variantes si le mot correspond √† une correction
            for correct, variants in corrections.items():
                if keyword == correct:
                    expanded_keywords.extend(variants)
                elif keyword in variants:
                    expanded_keywords.append(correct)
                    expanded_keywords.extend([v for v in variants if v != keyword])
        
        # Ajouter des concepts li√©s selon le contexte
        question_lower = question.lower()
        
        # Contexte d'urgence
        if any(word in question_lower for word in ["urgence", "emergency", "accident", "urgent", "urgance", "urgense"]):
            expanded_keywords.extend(["15", "18", "17", "112", "samu", "pompiers", "police", "secours", "help", "aide"])
        
        # Contexte de communication
        if any(word in question_lower for word in ["num√©ro", "numero", "t√©l√©phone", "contact", "appeler", "phone", "tel"]):
            expanded_keywords.extend(["tel", "phone", "appel", "joindre", "poste", "extension", "contact"])
        
        # Contexte de s√©curit√©
        if any(word in question_lower for word in ["s√©curit√©", "securite", "safety", "security"]):
            expanded_keywords.extend(["responsable", "procedure", "consigne", "√©vacuation", "alerte"])
        
        # Contexte d'√©quipement
        if any(word in question_lower for word in ["extincteur", "d√©fibrillateur", "equipment", "mat√©riel"]):
            expanded_keywords.extend(["o√π", "trouve", "located", "situ√©", "endroit"])
        
        # Contexte de localisation
        if any(word in question_lower for word in ["o√π", "ou", "where", "trouve", "located"]):
            expanded_keywords.extend(["situ√©", "position", "endroit", "lieu", "place"])
        
        return list(set(expanded_keywords))  # Supprimer les doublons
    
    def _find_relevant_passages(self, content: str, keywords: List[str], question: str) -> List[Dict[str, Any]]:
        """
        Trouve les passages pertinents dans un document
        
        Args:
            content: Contenu du document
            keywords: Mots-cl√©s √† rechercher
            question: Question originale
            
        Returns:
            Liste des passages pertinents avec leur score de pertinence
        """
        passages = []
        sentences = re.split(r'[.!?]+', content)
        sentences = [s.strip() for s in sentences if len(s.strip()) > 15]  # Abaiss√© pour capturer plus de phrases
        
        for sentence in sentences:
            sentence_lower = sentence.lower()
            relevance_score = 0
            
            # Score bas√© sur la pr√©sence de mots-cl√©s
            matched_keywords = []
            for keyword in keywords:
                if keyword in sentence_lower:
                    relevance_score += 2
                    matched_keywords.append(keyword)
                    
                    # Bonus si le mot-cl√© appara√Æt plusieurs fois
                    relevance_score += sentence_lower.count(keyword) * 0.5
            
            # Bonus pour les combinaisons de mots-cl√©s importantes
            important_combinations = [
                ("urgence", "num√©ro"), ("urgence", "numero"), ("urgence", "t√©l√©phone"),
                ("urgence", "contact"), ("urgence", "appel"), ("urgence", "poste"),
                ("s√©curit√©", "poste"), ("s√©curit√©", "responsable"), ("s√©curit√©", "chef"),
                ("accident", "proc√©dure"), ("accident", "secours"), ("accident", "alerte"),
                ("d√©fibrillateur", "localisation"), ("d√©fibrillateur", "emplacement"),
                ("extincteur", "localisation"), ("extincteur", "emplacement"),
                ("15", "samu"), ("18", "pompiers"), ("17", "police"), ("112", "urgence")
            ]
            
            for combo in important_combinations:
                combo_found = True
                for word in combo:
                    # V√©rifier si le mot ou ses variantes sont dans la phrase
                    word_variants = [word]
                    if word == "urgence":
                        word_variants.extend(["urgance", "urgense"])
                    elif word == "num√©ro":
                        word_variants.extend(["numero", "tel", "phone"])
                    elif word == "t√©l√©phone":
                        word_variants.extend(["telephone", "phone", "tel"])
                    
                    if not any(variant in sentence_lower for variant in word_variants):
                        combo_found = False
                        break
                
                if combo_found:
                    relevance_score += 5
            
            # Bonus pour les patterns sp√©cifiques aux urgences
            emergency_patterns = [
                r'\b(en cas d\'urgence|urgence)\b',
                r'\b(num√©ro|numero|n¬∞|no)\s*(d\')?urgence\b',
                r'\b(contacter|appeler|joindre)\b',
                r'\b(\d{2,4})\s*(poste|ext|extension)?\b',  # Num√©ros de t√©l√©phone/poste
                r'\b(15|18|17|112)\b',  # Num√©ros d'urgence
                r'\b(samu|pompiers|police|secours)\b',
                r'\b(chef|responsable|manager)\s*(de)?\s*(s√©curit√©|securite|site|√©quipe)\b'
            ]
            
            for pattern in emergency_patterns:
                if re.search(pattern, sentence_lower):
                    relevance_score += 3
            
            # Bonus pour les phrases qui contiennent des num√©ros
            if re.search(r'\b\d{2,5}\b', sentence):
                relevance_score += 1
            
            # Bonus pour les phrases qui commencent par des mots importants
            if any(sentence_lower.startswith(word) for word in ["urgence", "en cas", "pour", "appeler", "contacter", "num√©ro"]):
                relevance_score += 1
            
            # Malus pour les phrases tr√®s courtes (sauf si elles contiennent des num√©ros)
            if len(sentence) < 30 and not re.search(r'\b\d{2,5}\b', sentence):
                relevance_score *= 0.5
            # Malus pour les phrases tr√®s longues
            elif len(sentence) > 600:
                relevance_score *= 0.7
            
            if relevance_score > 0:
                # Trouver le contexte (phrases pr√©c√©dente et suivante)
                sentence_idx = sentences.index(sentence)
                context_parts = []
                
                if sentence_idx > 0:
                    context_parts.append(sentences[sentence_idx - 1])
                if sentence_idx < len(sentences) - 1:
                    context_parts.append(sentences[sentence_idx + 1])
                
                context = " [...] ".join(context_parts)
                
                passages.append({
                    "passage": sentence,
                    "context": context,
                    "relevance": relevance_score,
                    "matched_keywords": matched_keywords
                })
        
        return passages
    
    def _generate_general_document_response(self, question: str, stored_docs: Dict[str, Any]) -> str:
        """
        G√©n√®re une r√©ponse g√©n√©rale quand aucune correspondance sp√©cifique n'est trouv√©e
        
        Args:
            question: Question pos√©e
            stored_docs: Documents stock√©s
            
        Returns:
            R√©ponse g√©n√©rale
        """
        doc_names = list(stored_docs.keys())
        
        # Analyse de la question pour donner des suggestions plus pertinentes
        question_lower = question.lower()
        
        if len(doc_names) == 1:
            doc_name = doc_names[0]
            response = f"Je n'ai pas trouv√© d'information directe sur '{question}' dans le document \"{doc_name}\". "
        else:
            response = f"Je n'ai pas trouv√© d'information directe sur '{question}' dans les {len(doc_names)} documents analys√©s. "
        
        # Suggestions sp√©cifiques selon le type de question
        suggestions = []
        
        if any(word in question_lower for word in ["urgence", "num√©ro", "t√©l√©phone", "contact", "appeler"]):
            suggestions.append("‚Ä¢ Cherchez des termes comme 'contact', 't√©l√©phone', 'urgence', 'poste', 'responsable'")
            suggestions.append("‚Ä¢ Recherchez des num√©ros (15, 18, 17, 112, ou num√©ros internes)")
            suggestions.append("‚Ä¢ Demandez-moi 'proc√©dure d'urgence' ou 'contacts importants'")
        
        if any(word in question_lower for word in ["s√©curit√©", "accident", "proc√©dure"]):
            suggestions.append("‚Ä¢ Recherchez 's√©curit√©', 'proc√©dure', 'consignes', 'en cas d'urgence'")
            suggestions.append("‚Ä¢ Demandez-moi 'mesures de s√©curit√©' ou 'que faire en cas d'accident'")
        
        if any(word in question_lower for word in ["responsable", "chef", "manager"]):
            suggestions.append("‚Ä¢ Cherchez 'responsable', 'chef', 'manager', 'superviseur'")
            suggestions.append("‚Ä¢ Demandez-moi 'qui contacter' ou 'organigramme'")
        
        if not suggestions:
            suggestions = [
                "‚Ä¢ Reformulez votre question avec d'autres termes",
                "‚Ä¢ Demandez-moi un r√©sum√© g√©n√©ral du document",
                "‚Ä¢ Posez une question plus pr√©cise sur un aspect particulier",
                "‚Ä¢ Demandez-moi de rechercher un mot-cl√© sp√©cifique"
            ]
        
        response += "Voici comment je peux vous aider :\n\n"
        response += "\n".join(suggestions)
        
        # Ajouter quelques mots-cl√©s du document pour aider l'utilisateur
        first_doc = list(stored_docs.values())[0]
        content = first_doc["content"]
        
        # Extraire des mots-cl√©s pertinents du document
        words = re.findall(r'\b\w{4,}\b', content.lower())
        
        # Filtrer les mots-cl√©s pertinents
        relevant_words = []
        important_categories = [
            "urgence", "s√©curit√©", "accident", "proc√©dure", "responsable", "chef",
            "t√©l√©phone", "contact", "poste", "num√©ro", "appeler", "joindre",
            "d√©fibrillateur", "extincteur", "secours", "√©vacuation", "alerte",
            "travail", "bureau", "site", "√©quipe", "service", "d√©partement"
        ]
        
        word_freq = {}
        for word in words:
            if word in important_categories or any(cat in word for cat in important_categories):
                word_freq[word] = word_freq.get(word, 0) + 1
        
        if word_freq:
            sorted_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)
            relevant_words = [word for word, freq in sorted_words[:8] if freq > 1]
        
        if relevant_words:
            response += f"\n\nüìã Mots-cl√©s pr√©sents dans le document : {', '.join(relevant_words[:6])}"
        
        # Encourager l'utilisateur √† essayer diff√©rentes formulations
        response += "\n\nüí° Astuce : Essayez des questions comme 'Quel est le num√©ro d'urgence ?' ou 'Comment contacter la s√©curit√© ?'"
        
        return response
    
    def get_conversation_summary(self) -> Dict[str, Any]:
        """Retourne un r√©sum√© de la conversation"""
        return self.conversation_memory.get_conversation_summary()
    
    def clear_conversation_memory(self) -> None:
        """Vide la m√©moire de conversation"""
        self.conversation_memory.clear_memory()
        print("üíæ M√©moire de conversation effac√©e")
    
    def export_conversation(self, filepath: str) -> None:
        """Exporte la conversation"""
        self.conversation_memory.export_conversation(filepath)
        print(f"üíæ Conversation export√©e vers {filepath}")
    
    def get_model_info(self) -> Dict[str, Any]:
        """Retourne les informations sur le mod√®le"""
        return {
            "name": self.name,
            "version": self.version,
            "type": "local_ai",
            "modules": [
                "LinguisticPatterns",
                "KnowledgeBase", 
                "CodeGenerator",
                "ReasoningEngine",
                "ConversationMemory"
            ],
            "features": [
                "Code generation",
                "Natural language understanding",
                "Conversation memory",
                "Multi-language support",
                "100% local operation"
            ]
        }
    
    def _select_primary_intent(self, intent_scores: Dict[str, float], user_input: str) -> Tuple[str, float]:
        """S√©lectionne l'intention primaire avec logique contextuelle am√©lior√©e"""
        if not intent_scores:
            return "unknown", 0.0
        
        # Am√©liorer la d√©tection des demandes de r√©sum√©
        user_lower = user_input.lower().strip()
        
        # R√®gles sp√©ciales pour les questions sur les documents
        if self._has_documents_in_memory():
            # Mots-cl√©s qui indiquent clairement une question sur un document
            doc_indicators = [
                "r√©sume", "resume", "r√©sum√©", "explique", "analyse", 
                "que dit", "contient", "r√©sume le pdf", "r√©sume le doc",
                "r√©sume le document", "r√©sume le fichier"
            ]
            
            # D√©tecter "r√©sume le pdf" m√™me si seul
            if any(indicator in user_lower for indicator in doc_indicators):
                # Si c'est sp√©cifiquement "r√©sume le pdf" ou "r√©sume le doc"
                if any(phrase in user_lower for phrase in ["r√©sume le pdf", "r√©sume le doc", "r√©sume le document"]):
                    return "document_question", 1.0  # Force high confidence
                
                # Ou si c'est juste "r√©sume" et qu'on a des documents
                elif user_lower in ["r√©sume", "resume", "r√©sum√©"]:
                    return "document_question", 0.9
                
                # Autres questions sur documents
                else:
                    return "document_question", 0.8
        
        # S√©lection normale par score le plus √©lev√©
        best_intent = max(intent_scores.items(), key=lambda x: x[1])
        return best_intent[0], best_intent[1]
    
    def _has_documents_in_memory(self) -> bool:
        """V√©rifie si des documents sont en m√©moire"""
        return len(self.conversation_memory.get_document_content()) > 0
    
    def _get_document_position_description(self, doc_name: str) -> str:
        """
        G√©n√®re une description de la position d'un document dans l'ordre chronologique
        
        Args:
            doc_name: Nom du document
            
        Returns:
            Description de la position (ex: "premier", "deuxi√®me", etc.)
        """
        if not self.conversation_memory.document_order:
            return ""
        
        try:

            position = self.conversation_memory.document_order.index(doc_name)
            
            if position == 0:
                return "premier"
            elif position == 1:
                return "deuxi√®me"
            elif position == 2:
                return "troisi√®me"
            elif position == len(self.conversation_memory.document_order) - 1:
                return "dernier"
            else:
                return f"{position + 1}√®me"
        except ValueError:
            return ""
    

# Alias pour compatibilit√© avec l'ancien nom
AdvancedLocalAI = CustomAIModel