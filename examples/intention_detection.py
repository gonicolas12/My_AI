#!/usr/bin/env python3
"""
Exemple d'utilisation de la reconnaissance d'intentions - My Personal AI

Ce script d√©montre comment l'IA locale reconna√Æt automatiquement
les diff√©rents types d'intentions et adapte ses r√©ponses.
"""

import sys
import os

# Ajouter le r√©pertoire parent au chemin Python
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.ai_engine import AIEngine
from models.custom_ai_model import CustomAIModel
from models.linguistic_patterns import LinguisticPatterns

def test_greeting_detection():
    """Test de la d√©tection des salutations."""
    print("üîç Test de d√©tection des salutations")
    print("=" * 50)
    
    patterns = LinguisticPatterns()
    
    greetings = [
        "slt",
        "salut", 
        "bonjour",
        "bjr",
        "hello",
        "bonsoir",
        "coucou",
        "yo"
    ]
    
    for greeting in greetings:
        intention = patterns.detect_intention(greeting)
        print(f"'{greeting}' -> Intention: {intention}")
    
    print()

def test_code_questions():
    """Test de la d√©tection des questions de code."""
    print("üíª Test de d√©tection des questions de code")
    print("=" * 50)
    
    patterns = LinguisticPatterns()
    
    code_questions = [
        "Comment cr√©er une fonction en Python ?",
        "Explique les d√©corateurs Python",
        "Comment d√©boguer ce code ?",
        "Quelle est la syntaxe des listes ?",
        "Comment g√©rer les exceptions ?",
        "Optimise cette fonction",
        "Bug dans mon script Python"
    ]
    
    for question in code_questions:
        intention = patterns.detect_intention(question)
        print(f"'{question}' -> Intention: {intention}")
    
    print()

def test_document_questions():
    """Test de la d√©tection des questions sur documents."""
    print("üìÑ Test de d√©tection des questions sur documents")
    print("=" * 50)
    
    patterns = LinguisticPatterns()
    
    doc_questions = [
        "r√©sume ce document",
        "que dit le PDF ?",
        "analyse le rapport",
        "extrait les points cl√©s",
        "r√©sume le fichier DOCX",
        "que contient ce document ?",
        "points importants du rapport"
    ]
    
    for question in doc_questions:
        intention = patterns.detect_intention(question)
        print(f"'{question}' -> Intention: {intention}")
    
    print()

def test_general_questions():
    """Test de la d√©tection des questions g√©n√©rales."""
    print("üí¨ Test de d√©tection des questions g√©n√©rales")
    print("=" * 50)
    
    patterns = LinguisticPatterns()
    
    general_questions = [
        "Comment vas-tu ?",
        "Quel temps fait-il ?",
        "Raconte-moi une histoire",
        "Que penses-tu de l'IA ?",
        "Aide-moi avec un probl√®me",
        "J'ai besoin de conseils",
        "Peux-tu m'expliquer quelque chose ?"
    ]
    
    for question in general_questions:
        intention = patterns.detect_intention(question)
        print(f"'{question}' -> Intention: {intention}")
    
    print()

def test_ai_responses():
    """Test des r√©ponses adaptatives de l'IA."""
    print("ü§ñ Test des r√©ponses adaptatives de l'IA")
    print("=" * 50)
    
    try:
        # Initialiser l'IA
        ai_engine = AIEngine()
        ai_model = ai_engine.ai_model
        
        test_cases = [
            ("slt", "Salutation"),
            ("Comment cr√©er une liste en Python ?", "Question technique"),
            ("r√©sume le document", "Question sur document"),
            ("Comment vas-tu ?", "Question g√©n√©rale")
        ]
        
        for query, description in test_cases:
            print(f"\nüìù Test: {description}")
            print(f"Question: '{query}'")
            
            # Obtenir la r√©ponse de l'IA
            response = ai_model.generate_response(query)
            print(f"R√©ponse: {response[:100]}...")
            
    except Exception as e:
        print(f"Erreur lors du test de l'IA: {e}")
        print("Note: Assurez-vous que l'IA est correctement configur√©e.")

def demonstrate_memory_persistence():
    """D√©monstration de la persistance de la m√©moire."""
    print("üß† D√©monstration de la m√©moire conversationnelle")
    print("=" * 50)
    
    try:
        ai_engine = AIEngine()
        ai_model = ai_engine.ai_model
        
        # Simulation d'un document trait√©
        print("1. Simulation du traitement d'un document...")
        ai_model.memory.store_document_content("test_document.pdf", "Contenu test du document PDF avec informations importantes.")
        
        # V√©rification de la m√©moire
        print("2. V√©rification de la m√©moire...")
        doc_content = ai_model.memory.get_document_content("test_document.pdf")
        print(f"Document en m√©moire: {doc_content[:50]}...")
        
        # Question sur le document
        print("3. Question sur le document...")
        response = ai_model.generate_response("que contient test_document.pdf ?")
        print(f"R√©ponse: {response[:100]}...")
        
        # Simulation de stockage de code
        print("4. Simulation du stockage de code...")
        code_content = "def hello_world():\n    print('Hello, World!')"
        ai_model.memory.store_code_content("example_function", code_content)
        
        # Question sur le code
        print("5. Question sur le code...")
        response = ai_model.generate_response("explique la fonction hello_world")
        print(f"R√©ponse: {response[:100]}...")
        
    except Exception as e:
        print(f"Erreur lors de la d√©monstration: {e}")

def main():
    """Fonction principale pour tester la reconnaissance d'intentions."""
    print("üéØ D√©monstration de la Reconnaissance d'Intentions")
    print("My Personal AI - 100% Local")
    print("=" * 60)
    print()
    
    # Tests des diff√©rents types d'intentions
    test_greeting_detection()
    test_code_questions()
    test_document_questions()
    test_general_questions()
    
    # Test des r√©ponses adaptatives
    test_ai_responses()
    
    # D√©monstration de la m√©moire
    demonstrate_memory_persistence()
    
    print("\n‚úÖ D√©monstration termin√©e !")
    print("\nPoints cl√©s:")
    print("- L'IA reconna√Æt automatiquement le type de votre requ√™te")
    print("- Les r√©ponses sont adapt√©es √† l'intention d√©tect√©e")
    print("- La m√©moire conversationnelle conserve le contexte")
    print("- Tout fonctionne 100% localement, sans services externes")

if __name__ == "__main__":
    main()
