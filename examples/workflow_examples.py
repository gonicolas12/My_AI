#!/usr/bin/env python3
"""
Exemples de workflows complets - My Personal AI

Ce script d√©montre des sc√©narios d'utilisation r√©alistes 
de l'IA locale avec toutes ses fonctionnalit√©s.
"""

import sys
import os
import time

# Ajouter le r√©pertoire parent au chemin Python
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.ai_engine import AIEngine
from core.conversation import ConversationManager

def simulate_user_input(text, delay=1):
    """Simule une entr√©e utilisateur avec un d√©lai."""
    print(f"ü§ñ Utilisateur: {text}")
    time.sleep(delay)
    return text

def simulate_ai_response(ai_model, query):
    """Simule une r√©ponse de l'IA."""
    response = ai_model.generate_response(query)
    print(f"üß† IA: {response}")
    time.sleep(0.5)
    return response

def workflow_document_analysis():
    """Workflow complet d'analyse de document."""
    print("üìÑ WORKFLOW: Analyse de Document")
    print("=" * 50)
    
    try:
        # Initialiser l'IA
        ai_engine = AIEngine()
        ai_model = ai_engine.ai_model
        
        # 1. Salutation
        query = simulate_user_input("bonjour")
        simulate_ai_response(ai_model, query)
        
        # 2. Simulation du chargement d'un document
        print("\nüìÅ [Simulation: Utilisateur glisse un fichier 'rapport_2024.pdf']")
        ai_model.memory.store_document_content(
            "rapport_2024.pdf", 
            """Rapport Annuel 2024
            
            R√©sum√© Ex√©cutif:
            - Croissance de 15% du chiffre d'affaires
            - Expansion dans 3 nouveaux march√©s
            - Investissement de 2M‚Ç¨ en R&D
            - √âquipe pass√©e de 50 √† 75 employ√©s
            
            Recommandations:
            1. Automatiser les processus r√©p√©titifs
            2. D√©velopper une application mobile
            3. Renforcer la cybers√©curit√©
            4. Former les √©quipes aux nouvelles technologies
            
            Technologies mentionn√©es:
            - Python pour l'automatisation
            - React Native pour l'app mobile
            - Solutions Cloud AWS/Azure
            """
        )
        
        # 3. Demande de r√©sum√©
        query = simulate_user_input("r√©sume ce document")
        simulate_ai_response(ai_model, query)
        
        # 4. Question sp√©cifique
        query = simulate_user_input("quelles sont les recommandations du rapport ?")
        simulate_ai_response(ai_model, query)
        
        # 5. Question technique li√©e au document
        query = simulate_user_input("comment impl√©menter l'automatisation en Python mentionn√©e dans le rapport ?")
        simulate_ai_response(ai_model, query)
        
        # 6. Au revoir
        query = simulate_user_input("merci, au revoir")
        simulate_ai_response(ai_model, query)
        
    except Exception as e:
        print(f"Erreur dans le workflow: {e}")

def workflow_coding_assistance():
    """Workflow d'assistance au d√©veloppement."""
    print("\n\nüíª WORKFLOW: Assistance au D√©veloppement")
    print("=" * 50)
    
    try:
        ai_engine = AIEngine()
        ai_model = ai_engine.ai_model
        
        # 1. Salutation informelle
        query = simulate_user_input("slt")
        simulate_ai_response(ai_model, query)
        
        # 2. Question technique initiale
        query = simulate_user_input("Comment cr√©er une classe en Python ?")
        simulate_ai_response(ai_model, query)
        
        # 3. Simulation de code fourni par l'utilisateur
        print("\nüíæ [Simulation: Utilisateur partage du code]")
        code_content = """class User:
    def __init__(self, name):
        self.name = name
    
    def greet(self):
        print(f"Hello, {self.name}")
        
# Probl√®me: comment ajouter une m√©thode pour l'√¢ge ?"""
        
        ai_model.memory.store_code_content("user_class", code_content)
        
        # 4. Demande d'am√©lioration du code
        query = simulate_user_input("comment am√©liorer cette classe User ?")
        simulate_ai_response(ai_model, query)
        
        # 5. Question sur les bonnes pratiques
        query = simulate_user_input("quelles sont les bonnes pratiques pour les classes Python ?")
        simulate_ai_response(ai_model, query)
        
        # 6. Question de d√©bogage
        query = simulate_user_input("pourquoi mon code ne fonctionne pas ?")
        simulate_ai_response(ai_model, query)
        
    except Exception as e:
        print(f"Erreur dans le workflow: {e}")

def workflow_mixed_session():
    """Workflow mixte combinant plusieurs types d'interactions."""
    print("\n\nüîÑ WORKFLOW: Session Mixte Compl√®te")
    print("=" * 50)
    
    try:
        ai_engine = AIEngine()
        ai_model = ai_engine.ai_model
        
        # 1. Salutation
        query = simulate_user_input("bjr")
        simulate_ai_response(ai_model, query)
        
        # 2. Question g√©n√©rale
        query = simulate_user_input("comment vas-tu ?")
        simulate_ai_response(ai_model, query)
        
        # 3. Chargement d'un document technique
        print("\nüìÅ [Simulation: Chargement 'guide_python.pdf']")
        ai_model.memory.store_document_content(
            "guide_python.pdf",
            """Guide Python Avanc√©
            
            Chapitre 1: D√©corateurs
            Les d√©corateurs permettent de modifier le comportement des fonctions.
            
            Exemple:
            @property
            def name(self):
                return self._name
                
            Chapitre 2: Gestion des Exceptions
            try:
                # code risqu√©
            except ValueError as e:
                print(f"Erreur: {e}")
            """
        )
        
        # 4. Question sur le document
        query = simulate_user_input("que dit le guide sur les d√©corateurs ?")
        simulate_ai_response(ai_model, query)
        
        # 5. Question technique li√©e
        query = simulate_user_input("montre-moi un exemple de d√©corateur Python")
        simulate_ai_response(ai_model, query)
        
        # 6. Nouveau document
        print("\nüìÅ [Simulation: Chargement 'analyse_donnees.docx']")
        ai_model.memory.store_document_content(
            "analyse_donnees.docx",
            """Analyse des Donn√©es Client 2024
            
            Donn√©es collect√©es:
            - 10,000 clients actifs
            - Taux de satisfaction: 87%
            - Produits les plus vendus: A, B, C
            
            Recommandations analytiques:
            - Utiliser pandas pour l'analyse
            - Cr√©er des visualisations avec matplotlib
            - Impl√©menter un mod√®le pr√©dictif
            """
        )
        
        # 7. Question comparative entre documents
        query = simulate_user_input("comment utiliser Python pour l'analyse de donn√©es selon les deux documents ?")
        simulate_ai_response(ai_model, query)
        
        # 8. Clear et nouvelle session
        print("\nüîÑ [Simulation: Clear Chat]")
        ai_model.memory.clear_all()
        ai_engine.conversation.clear_history()
        
        # 9. Nouvelle salutation apr√®s clear
        query = simulate_user_input("salut, peux-tu m'aider ?")
        simulate_ai_response(ai_model, query)
        
        # 10. V√©rification que la m√©moire est vide
        query = simulate_user_input("r√©sume le guide python")
        simulate_ai_response(ai_model, query)
        
    except Exception as e:
        print(f"Erreur dans le workflow: {e}")

def workflow_error_handling():
    """Workflow de gestion d'erreurs et r√©cup√©ration."""
    print("\n\n‚ö†Ô∏è WORKFLOW: Gestion d'Erreurs")
    print("=" * 50)
    
    try:
        ai_engine = AIEngine()
        ai_model = ai_engine.ai_model
        
        # 1. Question normale
        query = simulate_user_input("bonjour")
        simulate_ai_response(ai_model, query)
        
        # 2. Question vide
        query = simulate_user_input("")
        response = ai_model.generate_response(query) if query else "Veuillez poser une question."
        print(f"üß† IA: {response}")
        
        # 3. Question tr√®s longue
        long_query = "Peux-tu m'expliquer " + "tr√®s " * 100 + "en d√©tail comment fonctionne Python ?"
        query = simulate_user_input(long_query[:50] + "... [question tr√®s longue]")
        simulate_ai_response(ai_model, long_query)
        
        # 4. Question avec caract√®res sp√©ciaux
        query = simulate_user_input("Comment g√©rer les caract√®res sp√©ciaux: √©, √†, √ß, ‚Ç¨, @, # ?")
        simulate_ai_response(ai_model, query)
        
        # 5. R√©cup√©ration normale
        query = simulate_user_input("merci pour ton aide")
        simulate_ai_response(ai_model, query)
        
    except Exception as e:
        print(f"Erreur dans le workflow: {e}")

def main():
    """Fonction principale pour ex√©cuter tous les workflows."""
    print("üéØ D√©monstration des Workflows Complets")
    print("My Personal AI - 100% Local")
    print("=" * 60)
    print()
    print("Cette d√©monstration montre des sc√©narios d'utilisation r√©alistes")
    print("avec toutes les fonctionnalit√©s de l'IA locale.")
    print()
    
    # Ex√©cuter tous les workflows
    workflow_document_analysis()
    workflow_coding_assistance()
    workflow_mixed_session()
    workflow_error_handling()
    
    print("\n" + "=" * 60)
    print("‚úÖ Tous les workflows ont √©t√© ex√©cut√©s avec succ√®s !")
    print()
    print("üîë Points cl√©s d√©montr√©s:")
    print("- Reconnaissance automatique des intentions")
    print("- M√©moire conversationnelle persistante")
    print("- Traitement de documents avec contexte")
    print("- Assistance au d√©veloppement adaptative")
    print("- Gestion robuste des erreurs")
    print("- Fonctionnement 100% local et s√©curis√©")
    print()
    print("üöÄ L'IA est pr√™te pour vos propres projets !")

if __name__ == "__main__":
    main()
